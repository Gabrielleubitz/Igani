import 'server-only'
import { createAppAuth } from '@octokit/auth-app'
import { Octokit } from '@octokit/rest'
import { TEMPLATE_PATHS } from '../../../lib/template-paths'

interface GitHubConfig {
  appId: string
  privateKey: string
  clientId: string
  clientSecret: string
}

export class GitHubService {
  private config: GitHubConfig
  private octokit: Octokit

  constructor() {
    // Validate env at runtime, not build time
    const required = [
      'GITHUB_APP_ID',
      'GITHUB_APP_PRIVATE_KEY',
      'GITHUB_APP_CLIENT_ID',
      'GITHUB_APP_CLIENT_SECRET'
    ]
    const missing = required.filter(k => !process.env[k])
    if (missing.length) {
      throw new Error(`Missing GitHub env vars: ${missing.join(', ')}`)
    }

    this.config = {
      appId: process.env.GITHUB_APP_ID!,
      privateKey: process.env.GITHUB_APP_PRIVATE_KEY!.replace(/\\n/g, '\n'),
      clientId: process.env.GITHUB_APP_CLIENT_ID!,
      clientSecret: process.env.GITHUB_APP_CLIENT_SECRET!
    }

    this.octokit = new Octokit({
      authStrategy: createAppAuth,
      auth: {
        appId: this.config.appId,
        privateKey: this.config.privateKey,
        clientId: this.config.clientId,
        clientSecret: this.config.clientSecret
      }
    })
  }

  async createRepository(
    installationId: string,
    owner: string,
    repoName: string,
    generatedFiles: any
  ) {
    try {
      // Get installation access token
      const { data: installation } = await this.octokit.rest.apps.getInstallation({
        installation_id: parseInt(installationId)
      })

      const installationOctokit = new Octokit({
        auth: `token ${installation.access_tokens_url}`,
      })

      // Create repository from template
      const { data: repo } = await installationOctokit.rest.repos.createUsingTemplate({
        template_owner: process.env.TEMPLATE_REPO_OWNER || 'Gabrielleubitz',
        template_repo: process.env.TEMPLATE_REPO_NAME || 'Igani-w-g',
        owner,
        name: repoName,
        description: `Event site generated by Igani - ${generatedFiles.site?.brandName || 'Unknown Brand'}`,
        private: true
      })

      // Create branch for our changes
      const branchName = 'initial-setup'
      const { data: defaultBranch } = await installationOctokit.rest.repos.getBranch({
        owner,
        repo: repoName,
        branch: repo.default_branch
      })

      await installationOctokit.rest.git.createRef({
        owner,
        repo: repoName,
        ref: `refs/heads/${branchName}`,
        sha: defaultBranch.commit.sha
      })

      // Create files with generated content using configurable paths
      const filesToCreate = [
        {
          path: TEMPLATE_PATHS.CONTENT.SITE,
          content: JSON.stringify(generatedFiles.site, null, 2)
        },
        {
          path: TEMPLATE_PATHS.CONTENT.EMAILS,
          content: JSON.stringify(generatedFiles.emails, null, 2)
        },
        {
          path: TEMPLATE_PATHS.CONTENT.SMS,
          content: JSON.stringify(generatedFiles.sms, null, 2)
        },
        {
          path: TEMPLATE_PATHS.BRANDING.THEME,
          content: JSON.stringify(generatedFiles.theme, null, 2)
        },
        {
          path: 'README-SETUP.md', // Add custom setup instructions without overwriting existing README
          content: this.generateReadme(generatedFiles.site?.brandName || 'Your Event Site')
        }
      ]

      // Create each file
      for (const file of filesToCreate) {
        await installationOctokit.rest.repos.createOrUpdateFileContents({
          owner,
          repo: repoName,
          path: file.path,
          message: `Add ${file.path}`,
          content: Buffer.from(file.content).toString('base64'),
          branch: branchName
        })
      }

      // Create pull request to merge changes
      const { data: pr } = await installationOctokit.rest.pulls.create({
        owner,
        repo: repoName,
        title: 'Initial event site setup',
        head: branchName,
        base: repo.default_branch,
        body: 'Generated event site content and configuration'
      })

      // Auto-merge the PR
      await installationOctokit.rest.pulls.merge({
        owner,
        repo: repoName,
        pull_number: pr.number,
        commit_title: 'Initial event site setup',
        merge_method: 'squash'
      })

      // Clean up branch
      await installationOctokit.rest.git.deleteRef({
        owner,
        repo: repoName,
        ref: `heads/${branchName}`
      })

      return {
        repoUrl: repo.html_url,
        cloneUrl: repo.clone_url,
        commitSha: pr.merge_commit_sha
      }
    } catch (error) {
      console.error('GitHub repository creation error:', error)
      throw new Error('Failed to create GitHub repository')
    }
  }

  async uploadAsset(
    installationId: string,
    owner: string,
    repoName: string,
    filePath: string,
    fileBuffer: Buffer,
    commitMessage: string
  ) {
    try {
      const installationOctokit = new Octokit({
        auth: `token ${installationId}`, // This needs to be the access token
      })

      await installationOctokit.rest.repos.createOrUpdateFileContents({
        owner,
        repo: repoName,
        path: filePath,
        message: commitMessage,
        content: fileBuffer.toString('base64')
      })

      return { success: true }
    } catch (error) {
      console.error('Asset upload error:', error)
      throw new Error('Failed to upload asset to repository')
    }
  }

  private generateReadme(brandName: string): string {
    return `# ${brandName} Event Site

This is your custom event site generated by Igani. Follow the steps below to deploy it to your infrastructure.

## Quick Start

1. **Environment Setup**
   Copy \`.env.example\` to \`.env.local\` and fill in your values:
   
   \`\`\`bash
   cp .env.example .env.local
   \`\`\`

2. **Install Dependencies**
   \`\`\`bash
   pnpm install
   \`\`\`

3. **Run Locally**
   \`\`\`bash
   pnpm dev
   \`\`\`

## Environment Variables

### Required
- \`PUBLIC_SITE_URL\` - Your domain (e.g., https://events.yourcompany.com)
- \`DATABASE_URL\` - Your database connection string

### Email (Choose One)
- **Mailjet**: \`MAILJET_API_KEY\`, \`MAILJET_API_SECRET\`
- **SendGrid**: \`SENDGRID_API_KEY\`
- **Resend**: \`RESEND_API_KEY\`

### SMS (Optional)
- **Twilio**: \`TWILIO_ACCOUNT_SID\`, \`TWILIO_AUTH_TOKEN\`, \`TWILIO_PHONE_NUMBER\`
- **AWS SNS**: \`AWS_ACCESS_KEY_ID\`, \`AWS_SECRET_ACCESS_KEY\`, \`AWS_REGION\`

### Database Options

#### Option 1: Supabase (Recommended)
1. Create a new project at [supabase.com](https://supabase.com)
2. Go to Settings â†’ Database
3. Copy your connection string to \`DATABASE_URL\`

#### Option 2: Firebase
1. Create a Firebase project
2. Enable Firestore
3. Download your service account key
4. Set \`FIREBASE_PROJECT_ID\`, \`FIREBASE_CLIENT_EMAIL\`, \`FIREBASE_PRIVATE_KEY\`

## Deploy to Vercel

[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/clone?repository-url=${encodeURIComponent(`https://github.com/${brandName.toLowerCase().replace(/\s+/g, '-')}-events`)}&project-name=${encodeURIComponent(brandName.toLowerCase().replace(/\s+/g, '-'))}-events&env=PUBLIC_SITE_URL,DATABASE_URL,MAILJET_API_KEY,MAILJET_API_SECRET)

## Customization

### Content
Edit files in \`content/default/\`:
- \`content.json\` - Site copy and text
- \`emails.json\` - Email templates  
- \`sms.json\` - SMS message templates

### Branding
Edit \`branding/default/theme.json\` for:
- Colors and typography
- Logo paths
- Brand-specific styling

Replace files in \`public/branding/default/\`:
- \`logo.svg\` - Your logo (light theme)
- \`logo-white.svg\` - Your logo (dark theme)
- \`hero.jpg\` - Hero image

### Advanced
The site uses Next.js 14 with:
- TypeScript
- Tailwind CSS
- Prisma ORM
- Framer Motion

## Support

For setup assistance or customization help, contact [support@igani.co](mailto:support@igani.co).

Generated by [Igani](https://igani.co) - AI-powered event sites.`
  }
}