import { put } from '@vercel/blob'
import { createWriteStream, promises as fs } from 'fs'
import { join } from 'path'
import archiver from 'archiver'
import { tmpdir } from 'os'
import { TEMPLATE_PATHS } from './template-paths'

export interface TemplateFiles {
  site: any
  emails: any
  sms: any
  theme: any
  brandName?: string
}

export class StorageService {
  async createZipPackage(orderId: string, templateFiles: TemplateFiles): Promise<string> {
    try {
      const tempDir = tmpdir()
      const zipPath = join(tempDir, `${orderId}.zip`)
      
      // Create the ZIP file
      const output = createWriteStream(zipPath)
      const archive = archiver('zip', { zlib: { level: 9 } })
      
      archive.pipe(output)
      
      // Add template files using configurable paths
      const files = [
        {
          path: TEMPLATE_PATHS.CONTENT.SITE,
          content: JSON.stringify(templateFiles.site, null, 2)
        },
        {
          path: TEMPLATE_PATHS.CONTENT.EMAILS, 
          content: JSON.stringify(templateFiles.emails, null, 2)
        },
        {
          path: TEMPLATE_PATHS.CONTENT.SMS,
          content: JSON.stringify(templateFiles.sms, null, 2)
        },
        {
          path: TEMPLATE_PATHS.BRANDING.THEME,
          content: JSON.stringify(templateFiles.theme, null, 2)
        },
        {
          path: 'README.md',
          content: this.generateReadme(templateFiles.brandName || 'Event Site')
        },
        {
          path: 'package.json',
          content: JSON.stringify(this.getPackageJson(templateFiles.brandName || 'Event Site'), null, 2)
        },
        {
          path: '.env.example',
          content: this.getEnvExample()
        },
        {
          path: 'next.config.js',
          content: this.getNextConfig()
        }
      ]
      
      // Add each file to the archive
      files.forEach(file => {
        archive.append(file.content, { name: file.path })
      })
      
      // Add basic template structure directories
      archive.append('', { name: `${TEMPLATE_PATHS.ASSETS.LOGOS}/.gitkeep` })
      archive.append('', { name: `${TEMPLATE_PATHS.ASSETS.IMAGES}/.gitkeep` })
      archive.append('', { name: `${TEMPLATE_PATHS.ASSETS.BRANDING}/.gitkeep` })
      
      await new Promise<void>((resolve, reject) => {
        output.on('close', () => resolve())
        archive.on('error', reject)
        archive.finalize()
      })
      
      // Upload to Vercel Blob or S3
      if (process.env.BLOB_STORE === 'vercel') {
        return await this.uploadToVercelBlob(zipPath, `${orderId}.zip`)
      } else {
        return await this.uploadToS3(zipPath, `${orderId}.zip`)
      }
      
    } catch (error) {
      console.error('Error creating ZIP package:', error)
      throw new Error('Failed to create ZIP package')
    }
  }
  
  private async uploadToVercelBlob(filePath: string, fileName: string): Promise<string> {
    try {
      const fileBuffer = await fs.readFile(filePath)
      const blob = await put(fileName, fileBuffer, {
        access: 'public',
        token: process.env.VERCEL_BLOB_READ_WRITE_TOKEN
      })
      
      // Clean up temp file
      await fs.unlink(filePath)
      
      return blob.url
    } catch (error) {
      console.error('Vercel Blob upload error:', error)
      throw error
    }
  }
  
  private async uploadToS3(filePath: string, fileName: string): Promise<string> {
    // S3 implementation would go here
    // For now, return a placeholder URL
    return `https://${process.env.S3_BUCKET}.s3.amazonaws.com/${fileName}`
  }
  
  private generateReadme(brandName: string): string {
    return `# ${brandName} Event Site

This is your custom event site generated by Igani.

## Quick Start

1. Install dependencies:
   \`\`\`bash
   npm install
   \`\`\`

2. Set up your environment:
   \`\`\`bash
   cp .env.example .env.local
   \`\`\`

3. Configure your environment variables in \`.env.local\`

4. Run the development server:
   \`\`\`bash
   npm run dev
   \`\`\`

## Deployment

### Deploy to Vercel
1. Push this code to your GitHub repository
2. Connect your GitHub repo to Vercel
3. Set your environment variables in Vercel dashboard
4. Deploy!

### Environment Variables
- \`PUBLIC_SITE_URL\` - Your site URL
- \`DATABASE_URL\` - Database connection string  
- \`MAILJET_API_KEY\` - For sending emails
- \`MAILJET_API_SECRET\` - For sending emails

## Customization

Edit the files in \`content/default/\` to customize your event site:
- \`content.json\` - Site content and copy
- \`emails.json\` - Email templates
- \`sms.json\` - SMS templates
- \`branding/default/theme.json\` - Colors and branding

Add your logo and images to \`public/branding/default/\`.

Generated by [Igani](https://igani.co)
`
  }
  
  private getPackageJson(brandName: string) {
    return {
      name: brandName.toLowerCase().replace(/[^a-z0-9]/g, '-'),
      version: '1.0.0',
      scripts: {
        dev: 'next dev',
        build: 'next build',
        start: 'next start',
        lint: 'next lint'
      },
      dependencies: {
        next: '^14.0.0',
        react: '^18.0.0',
        'react-dom': '^18.0.0',
        '@prisma/client': '^5.0.0',
        prisma: '^5.0.0'
      }
    }
  }
  
  private getEnvExample(): string {
    return `# Site Configuration
PUBLIC_SITE_URL=https://your-site.com

# Database
DATABASE_URL="postgresql://user:pass@localhost:5432/events"

# Email (Mailjet)
MAILJET_API_KEY=your_mailjet_key
MAILJET_API_SECRET=your_mailjet_secret

# SMS (Twilio) - Optional
TWILIO_ACCOUNT_SID=your_twilio_sid
TWILIO_AUTH_TOKEN=your_twilio_token
TWILIO_PHONE_NUMBER=+1234567890
`
  }
  
  private getNextConfig(): string {
    return `/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    appDir: true
  },
  images: {
    domains: ['localhost']
  }
}

module.exports = nextConfig
`
  }
}