(()=>{var e={};e.id=342,e.ids=[342],e.modules={53524:e=>{"use strict";e.exports=require("@prisma/client")},20399:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},1742:(e,t,r)=>{"use strict";r.r(t),r.d(t,{originalPathname:()=>V,patchFetch:()=>K,requestAsyncStorage:()=>W,routeModule:()=>M,serverHooks:()=>N,staticGenerationAsyncStorage:()=>H});var s={};r.r(s),r.d(s,{POST:()=>B,dynamic:()=>z,runtime:()=>$});var o=r(49303),i=r(88716),n=r(60670),a=r(87070),c=r(72331),l=r(39173),p=r(79988),u=r(53164),d=r(8058),g=class extends Error{constructor(e,t,r){super(`Request failed due to following response errors:
`+r.errors.map(e=>` - ${e.message}`).join("\n")),this.request=e,this.headers=t,this.response=r,this.name="GraphqlResponseError",this.errors=r.errors,this.data=r.data,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},h=["method","baseUrl","url","headers","request","query","mediaType"],m=["query","method","url"],T=/\/api\/v3\/?$/;function E(e,t){let r=e.defaults(t);return Object.assign((e,t)=>(function(e,t,r){if(r){if("string"==typeof t&&"query"in r)return Promise.reject(Error('[@octokit/graphql] "query" cannot be used as variable name'));for(let e in r)if(m.includes(e))return Promise.reject(Error(`[@octokit/graphql] "${e}" cannot be used as variable name`))}let s="string"==typeof t?Object.assign({query:t},r):t,o=Object.keys(s).reduce((e,t)=>(h.includes(t)?e[t]=s[t]:(e.variables||(e.variables={}),e.variables[t]=s[t]),e),{}),i=s.baseUrl||e.endpoint.DEFAULTS.baseUrl;return T.test(i)&&(o.url=i.replace(T,"/api/graphql")),e(o).then(e=>{if(e.data.errors){let t={};for(let r of Object.keys(e.headers))t[r]=e.headers[r];throw new g(o,t,e.data)}return e.data.data})})(r,e,t),{defaults:E.bind(null,r),endpoint:r.endpoint})}E(d.request,{headers:{"user-agent":`octokit-graphql.js/7.1.1 ${(0,p.getUserAgent)()}`},method:"POST",url:"/graphql"});let f=/^v1\./,_=/^ghs_/,b=/^ghu_/;async function w(e){let t=3===e.split(/\./).length,r=f.test(e)||_.test(e),s=b.test(e);return{type:"token",token:e,tokenType:t?"app":r?"installation":s?"user-to-server":"oauth"}}async function y(e,t,r,s){let o=t.endpoint.merge(r,s);return o.headers.authorization=3===e.split(/\./).length?`bearer ${e}`:`token ${e}`,t(o)}let k=function(e){if(!e)throw Error("[@octokit/auth-token] No token passed to createTokenAuth");if("string"!=typeof e)throw Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");return e=e.replace(/^(token|bearer) +/i,""),Object.assign(w.bind(null,e),{hook:y.bind(null,e)})};var v="5.2.2",S=()=>{},A=console.warn.bind(console),P=console.error.bind(console),G=`octokit-core.js/${v} ${(0,p.getUserAgent)()}`,O=class{static{this.VERSION=v}static defaults(e){return class extends this{constructor(...t){let r=t[0]||{};if("function"==typeof e){super(e(r));return}super(Object.assign({},e,r,r.userAgent&&e.userAgent?{userAgent:`${r.userAgent} ${e.userAgent}`}:null))}}}static{this.plugins=[]}static plugin(...e){let t=this.plugins;return class extends this{static{this.plugins=t.concat(e.filter(e=>!t.includes(e)))}}}constructor(e={}){let t=new u.Collection,r={baseUrl:d.request.endpoint.DEFAULTS.baseUrl,headers:{},request:Object.assign({},e.request,{hook:t.bind(null,"request")}),mediaType:{previews:[],format:""}};if(r.headers["user-agent"]=e.userAgent?`${e.userAgent} ${G}`:G,e.baseUrl&&(r.baseUrl=e.baseUrl),e.previews&&(r.mediaType.previews=e.previews),e.timeZone&&(r.headers["time-zone"]=e.timeZone),this.request=d.request.defaults(r),this.graphql=E(this.request,{method:"POST",url:"/graphql"}).defaults(r),this.log=function(e={}){return"function"!=typeof e.debug&&(e.debug=S),"function"!=typeof e.info&&(e.info=S),"function"!=typeof e.warn&&(e.warn=A),"function"!=typeof e.error&&(e.error=P),e}(e.log),this.hook=t,e.authStrategy){let{authStrategy:r,...s}=e,o=r(Object.assign({request:this.request,log:this.log,octokit:this,octokitOptions:s},e.auth));t.wrap("request",o.hook),this.auth=o}else if(e.auth){let r=k(e.auth);t.wrap("request",r.hook),this.auth=r}else this.auth=async()=>({type:"unauthenticated"});let s=this.constructor;for(let t=0;t<s.plugins.length;++t)Object.assign(this,s.plugins[t](this,e))}};function F(e){e.hook.wrap("request",(t,r)=>{e.log.debug("request",r);let s=Date.now(),o=e.request.endpoint.parse(r),i=o.url.replace(r.baseUrl,"");return t(r).then(t=>(e.log.info(`${o.method} ${i} - ${t.status} in ${Date.now()-s}ms`),t)).catch(t=>{throw e.log.info(`${o.method} ${i} - ${t.status} in ${Date.now()-s}ms`),t})})}function R(e,t,r){let s="function"==typeof t?t.endpoint(r):e.request.endpoint(t,r),o="function"==typeof t?t:e.request,i=s.method,n=s.headers,a=s.url;return{[Symbol.asyncIterator]:()=>({async next(){if(!a)return{done:!0};try{let e=await o({method:i,url:a,headers:n}),t=function(e){if(!e.data)return{...e,data:[]};if(!("total_count"in e.data&&!("url"in e.data)))return e;let t=e.data.incomplete_results,r=e.data.repository_selection,s=e.data.total_count;delete e.data.incomplete_results,delete e.data.repository_selection,delete e.data.total_count;let o=Object.keys(e.data)[0],i=e.data[o];return e.data=i,void 0!==t&&(e.data.incomplete_results=t),void 0!==r&&(e.data.repository_selection=r),e.data.total_count=s,e}(e);return a=((t.headers.link||"").match(/<([^<>]+)>;\s*rel="next"/)||[])[1],{value:t}}catch(e){if(409!==e.status)throw e;return a="",{value:{status:200,headers:{},data:[]}}}}})}}function U(e,t,r,s){return"function"==typeof r&&(s=r,r=void 0),function e(t,r,s,o){return s.next().then(i=>{if(i.done)return r;let n=!1;return(r=r.concat(o?o(i.value,function(){n=!0}):i.value.data),n)?r:e(t,r,s,o)})}(e,[],R(e,t,r)[Symbol.asyncIterator](),s)}function C(e){return{paginate:Object.assign(U.bind(null,e),{iterator:R.bind(null,e)})}}F.VERSION="4.0.1",Object.assign(U,{iterator:R}),C.VERSION="11.4.4-cjs.2";let D=new Map;for(let[e,t]of Object.entries({actions:{addCustomLabelsToSelfHostedRunnerForOrg:["POST /orgs/{org}/actions/runners/{runner_id}/labels"],addCustomLabelsToSelfHostedRunnerForRepo:["POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],addRepoAccessToSelfHostedRunnerGroupInOrg:["PUT /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],approveWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"],cancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"],createEnvironmentVariable:["POST /repos/{owner}/{repo}/environments/{environment_name}/variables"],createOrUpdateEnvironmentSecret:["PUT /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"],createOrgVariable:["POST /orgs/{org}/actions/variables"],createRegistrationTokenForOrg:["POST /orgs/{org}/actions/runners/registration-token"],createRegistrationTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/registration-token"],createRemoveTokenForOrg:["POST /orgs/{org}/actions/runners/remove-token"],createRemoveTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/remove-token"],createRepoVariable:["POST /repos/{owner}/{repo}/actions/variables"],createWorkflowDispatch:["POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"],deleteActionsCacheById:["DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}"],deleteActionsCacheByKey:["DELETE /repos/{owner}/{repo}/actions/caches{?key,ref}"],deleteArtifact:["DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],deleteEnvironmentSecret:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],deleteEnvironmentVariable:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],deleteOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}"],deleteOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"],deleteRepoVariable:["DELETE /repos/{owner}/{repo}/actions/variables/{name}"],deleteSelfHostedRunnerFromOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}"],deleteSelfHostedRunnerFromRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"],deleteWorkflowRun:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],deleteWorkflowRunLogs:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],disableSelectedRepositoryGithubActionsOrganization:["DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"],disableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"],downloadArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"],downloadJobLogsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"],downloadWorkflowRunAttemptLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"],downloadWorkflowRunLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],enableSelectedRepositoryGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"],enableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"],forceCancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel"],generateRunnerJitconfigForOrg:["POST /orgs/{org}/actions/runners/generate-jitconfig"],generateRunnerJitconfigForRepo:["POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig"],getActionsCacheList:["GET /repos/{owner}/{repo}/actions/caches"],getActionsCacheUsage:["GET /repos/{owner}/{repo}/actions/cache/usage"],getActionsCacheUsageByRepoForOrg:["GET /orgs/{org}/actions/cache/usage-by-repository"],getActionsCacheUsageForOrg:["GET /orgs/{org}/actions/cache/usage"],getAllowedActionsOrganization:["GET /orgs/{org}/actions/permissions/selected-actions"],getAllowedActionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/selected-actions"],getArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],getCustomOidcSubClaimForRepo:["GET /repos/{owner}/{repo}/actions/oidc/customization/sub"],getEnvironmentPublicKey:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key"],getEnvironmentSecret:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],getEnvironmentVariable:["GET /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],getGithubActionsDefaultWorkflowPermissionsOrganization:["GET /orgs/{org}/actions/permissions/workflow"],getGithubActionsDefaultWorkflowPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/workflow"],getGithubActionsPermissionsOrganization:["GET /orgs/{org}/actions/permissions"],getGithubActionsPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions"],getJobForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],getOrgPublicKey:["GET /orgs/{org}/actions/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}"],getOrgVariable:["GET /orgs/{org}/actions/variables/{name}"],getPendingDeploymentsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],getRepoPermissions:["GET /repos/{owner}/{repo}/actions/permissions",{},{renamed:["actions","getGithubActionsPermissionsRepository"]}],getRepoPublicKey:["GET /repos/{owner}/{repo}/actions/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],getRepoVariable:["GET /repos/{owner}/{repo}/actions/variables/{name}"],getReviewsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"],getSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}"],getSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}"],getWorkflow:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],getWorkflowAccessToRepository:["GET /repos/{owner}/{repo}/actions/permissions/access"],getWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],getWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"],getWorkflowRunUsage:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"],getWorkflowUsage:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"],listArtifactsForRepo:["GET /repos/{owner}/{repo}/actions/artifacts"],listEnvironmentSecrets:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets"],listEnvironmentVariables:["GET /repos/{owner}/{repo}/environments/{environment_name}/variables"],listJobsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"],listJobsForWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"],listLabelsForSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}/labels"],listLabelsForSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],listOrgSecrets:["GET /orgs/{org}/actions/secrets"],listOrgVariables:["GET /orgs/{org}/actions/variables"],listRepoOrganizationSecrets:["GET /repos/{owner}/{repo}/actions/organization-secrets"],listRepoOrganizationVariables:["GET /repos/{owner}/{repo}/actions/organization-variables"],listRepoSecrets:["GET /repos/{owner}/{repo}/actions/secrets"],listRepoVariables:["GET /repos/{owner}/{repo}/actions/variables"],listRepoWorkflows:["GET /repos/{owner}/{repo}/actions/workflows"],listRunnerApplicationsForOrg:["GET /orgs/{org}/actions/runners/downloads"],listRunnerApplicationsForRepo:["GET /repos/{owner}/{repo}/actions/runners/downloads"],listSelectedReposForOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}/repositories"],listSelectedReposForOrgVariable:["GET /orgs/{org}/actions/variables/{name}/repositories"],listSelectedRepositoriesEnabledGithubActionsOrganization:["GET /orgs/{org}/actions/permissions/repositories"],listSelfHostedRunnersForOrg:["GET /orgs/{org}/actions/runners"],listSelfHostedRunnersForRepo:["GET /repos/{owner}/{repo}/actions/runners"],listWorkflowRunArtifacts:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"],listWorkflowRuns:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"],listWorkflowRunsForRepo:["GET /repos/{owner}/{repo}/actions/runs"],reRunJobForWorkflowRun:["POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun"],reRunWorkflow:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],reRunWorkflowFailedJobs:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs"],removeAllCustomLabelsFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels"],removeAllCustomLabelsFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],removeCustomLabelFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}"],removeCustomLabelFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],reviewCustomGatesForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule"],reviewPendingDeploymentsForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],setAllowedActionsOrganization:["PUT /orgs/{org}/actions/permissions/selected-actions"],setAllowedActionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"],setCustomLabelsForSelfHostedRunnerForOrg:["PUT /orgs/{org}/actions/runners/{runner_id}/labels"],setCustomLabelsForSelfHostedRunnerForRepo:["PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],setCustomOidcSubClaimForRepo:["PUT /repos/{owner}/{repo}/actions/oidc/customization/sub"],setGithubActionsDefaultWorkflowPermissionsOrganization:["PUT /orgs/{org}/actions/permissions/workflow"],setGithubActionsDefaultWorkflowPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/workflow"],setGithubActionsPermissionsOrganization:["PUT /orgs/{org}/actions/permissions"],setGithubActionsPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"],setSelectedReposForOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories"],setSelectedRepositoriesEnabledGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories"],setWorkflowAccessToRepository:["PUT /repos/{owner}/{repo}/actions/permissions/access"],updateEnvironmentVariable:["PATCH /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],updateOrgVariable:["PATCH /orgs/{org}/actions/variables/{name}"],updateRepoVariable:["PATCH /repos/{owner}/{repo}/actions/variables/{name}"]},activity:{checkRepoIsStarredByAuthenticatedUser:["GET /user/starred/{owner}/{repo}"],deleteRepoSubscription:["DELETE /repos/{owner}/{repo}/subscription"],deleteThreadSubscription:["DELETE /notifications/threads/{thread_id}/subscription"],getFeeds:["GET /feeds"],getRepoSubscription:["GET /repos/{owner}/{repo}/subscription"],getThread:["GET /notifications/threads/{thread_id}"],getThreadSubscriptionForAuthenticatedUser:["GET /notifications/threads/{thread_id}/subscription"],listEventsForAuthenticatedUser:["GET /users/{username}/events"],listNotificationsForAuthenticatedUser:["GET /notifications"],listOrgEventsForAuthenticatedUser:["GET /users/{username}/events/orgs/{org}"],listPublicEvents:["GET /events"],listPublicEventsForRepoNetwork:["GET /networks/{owner}/{repo}/events"],listPublicEventsForUser:["GET /users/{username}/events/public"],listPublicOrgEvents:["GET /orgs/{org}/events"],listReceivedEventsForUser:["GET /users/{username}/received_events"],listReceivedPublicEventsForUser:["GET /users/{username}/received_events/public"],listRepoEvents:["GET /repos/{owner}/{repo}/events"],listRepoNotificationsForAuthenticatedUser:["GET /repos/{owner}/{repo}/notifications"],listReposStarredByAuthenticatedUser:["GET /user/starred"],listReposStarredByUser:["GET /users/{username}/starred"],listReposWatchedByUser:["GET /users/{username}/subscriptions"],listStargazersForRepo:["GET /repos/{owner}/{repo}/stargazers"],listWatchedReposForAuthenticatedUser:["GET /user/subscriptions"],listWatchersForRepo:["GET /repos/{owner}/{repo}/subscribers"],markNotificationsAsRead:["PUT /notifications"],markRepoNotificationsAsRead:["PUT /repos/{owner}/{repo}/notifications"],markThreadAsDone:["DELETE /notifications/threads/{thread_id}"],markThreadAsRead:["PATCH /notifications/threads/{thread_id}"],setRepoSubscription:["PUT /repos/{owner}/{repo}/subscription"],setThreadSubscription:["PUT /notifications/threads/{thread_id}/subscription"],starRepoForAuthenticatedUser:["PUT /user/starred/{owner}/{repo}"],unstarRepoForAuthenticatedUser:["DELETE /user/starred/{owner}/{repo}"]},apps:{addRepoToInstallation:["PUT /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","addRepoToInstallationForAuthenticatedUser"]}],addRepoToInstallationForAuthenticatedUser:["PUT /user/installations/{installation_id}/repositories/{repository_id}"],checkToken:["POST /applications/{client_id}/token"],createFromManifest:["POST /app-manifests/{code}/conversions"],createInstallationAccessToken:["POST /app/installations/{installation_id}/access_tokens"],deleteAuthorization:["DELETE /applications/{client_id}/grant"],deleteInstallation:["DELETE /app/installations/{installation_id}"],deleteToken:["DELETE /applications/{client_id}/token"],getAuthenticated:["GET /app"],getBySlug:["GET /apps/{app_slug}"],getInstallation:["GET /app/installations/{installation_id}"],getOrgInstallation:["GET /orgs/{org}/installation"],getRepoInstallation:["GET /repos/{owner}/{repo}/installation"],getSubscriptionPlanForAccount:["GET /marketplace_listing/accounts/{account_id}"],getSubscriptionPlanForAccountStubbed:["GET /marketplace_listing/stubbed/accounts/{account_id}"],getUserInstallation:["GET /users/{username}/installation"],getWebhookConfigForApp:["GET /app/hook/config"],getWebhookDelivery:["GET /app/hook/deliveries/{delivery_id}"],listAccountsForPlan:["GET /marketplace_listing/plans/{plan_id}/accounts"],listAccountsForPlanStubbed:["GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"],listInstallationReposForAuthenticatedUser:["GET /user/installations/{installation_id}/repositories"],listInstallationRequestsForAuthenticatedApp:["GET /app/installation-requests"],listInstallations:["GET /app/installations"],listInstallationsForAuthenticatedUser:["GET /user/installations"],listPlans:["GET /marketplace_listing/plans"],listPlansStubbed:["GET /marketplace_listing/stubbed/plans"],listReposAccessibleToInstallation:["GET /installation/repositories"],listSubscriptionsForAuthenticatedUser:["GET /user/marketplace_purchases"],listSubscriptionsForAuthenticatedUserStubbed:["GET /user/marketplace_purchases/stubbed"],listWebhookDeliveries:["GET /app/hook/deliveries"],redeliverWebhookDelivery:["POST /app/hook/deliveries/{delivery_id}/attempts"],removeRepoFromInstallation:["DELETE /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","removeRepoFromInstallationForAuthenticatedUser"]}],removeRepoFromInstallationForAuthenticatedUser:["DELETE /user/installations/{installation_id}/repositories/{repository_id}"],resetToken:["PATCH /applications/{client_id}/token"],revokeInstallationAccessToken:["DELETE /installation/token"],scopeToken:["POST /applications/{client_id}/token/scoped"],suspendInstallation:["PUT /app/installations/{installation_id}/suspended"],unsuspendInstallation:["DELETE /app/installations/{installation_id}/suspended"],updateWebhookConfigForApp:["PATCH /app/hook/config"]},billing:{getGithubActionsBillingOrg:["GET /orgs/{org}/settings/billing/actions"],getGithubActionsBillingUser:["GET /users/{username}/settings/billing/actions"],getGithubBillingUsageReportOrg:["GET /organizations/{org}/settings/billing/usage"],getGithubPackagesBillingOrg:["GET /orgs/{org}/settings/billing/packages"],getGithubPackagesBillingUser:["GET /users/{username}/settings/billing/packages"],getSharedStorageBillingOrg:["GET /orgs/{org}/settings/billing/shared-storage"],getSharedStorageBillingUser:["GET /users/{username}/settings/billing/shared-storage"]},checks:{create:["POST /repos/{owner}/{repo}/check-runs"],createSuite:["POST /repos/{owner}/{repo}/check-suites"],get:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],getSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],listAnnotations:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"],listForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],listForSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"],listSuitesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],rerequestRun:["POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest"],rerequestSuite:["POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"],setSuitesPreferences:["PATCH /repos/{owner}/{repo}/check-suites/preferences"],update:["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]},codeScanning:{commitAutofix:["POST /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix/commits"],createAutofix:["POST /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix"],createVariantAnalysis:["POST /repos/{owner}/{repo}/code-scanning/codeql/variant-analyses"],deleteAnalysis:["DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"],deleteCodeqlDatabase:["DELETE /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"],getAlert:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",{},{renamedParameters:{alert_id:"alert_number"}}],getAnalysis:["GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"],getAutofix:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix"],getCodeqlDatabase:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"],getDefaultSetup:["GET /repos/{owner}/{repo}/code-scanning/default-setup"],getSarif:["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],getVariantAnalysis:["GET /repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}"],getVariantAnalysisRepoTask:["GET /repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}/repos/{repo_owner}/{repo_name}"],listAlertInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"],listAlertsForOrg:["GET /orgs/{org}/code-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/code-scanning/alerts"],listAlertsInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",{},{renamed:["codeScanning","listAlertInstances"]}],listCodeqlDatabases:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases"],listRecentAnalyses:["GET /repos/{owner}/{repo}/code-scanning/analyses"],updateAlert:["PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"],updateDefaultSetup:["PATCH /repos/{owner}/{repo}/code-scanning/default-setup"],uploadSarif:["POST /repos/{owner}/{repo}/code-scanning/sarifs"]},codeSecurity:{attachConfiguration:["POST /orgs/{org}/code-security/configurations/{configuration_id}/attach"],attachEnterpriseConfiguration:["POST /enterprises/{enterprise}/code-security/configurations/{configuration_id}/attach"],createConfiguration:["POST /orgs/{org}/code-security/configurations"],createConfigurationForEnterprise:["POST /enterprises/{enterprise}/code-security/configurations"],deleteConfiguration:["DELETE /orgs/{org}/code-security/configurations/{configuration_id}"],deleteConfigurationForEnterprise:["DELETE /enterprises/{enterprise}/code-security/configurations/{configuration_id}"],detachConfiguration:["DELETE /orgs/{org}/code-security/configurations/detach"],getConfiguration:["GET /orgs/{org}/code-security/configurations/{configuration_id}"],getConfigurationForRepository:["GET /repos/{owner}/{repo}/code-security-configuration"],getConfigurationsForEnterprise:["GET /enterprises/{enterprise}/code-security/configurations"],getConfigurationsForOrg:["GET /orgs/{org}/code-security/configurations"],getDefaultConfigurations:["GET /orgs/{org}/code-security/configurations/defaults"],getDefaultConfigurationsForEnterprise:["GET /enterprises/{enterprise}/code-security/configurations/defaults"],getRepositoriesForConfiguration:["GET /orgs/{org}/code-security/configurations/{configuration_id}/repositories"],getRepositoriesForEnterpriseConfiguration:["GET /enterprises/{enterprise}/code-security/configurations/{configuration_id}/repositories"],getSingleConfigurationForEnterprise:["GET /enterprises/{enterprise}/code-security/configurations/{configuration_id}"],setConfigurationAsDefault:["PUT /orgs/{org}/code-security/configurations/{configuration_id}/defaults"],setConfigurationAsDefaultForEnterprise:["PUT /enterprises/{enterprise}/code-security/configurations/{configuration_id}/defaults"],updateConfiguration:["PATCH /orgs/{org}/code-security/configurations/{configuration_id}"],updateEnterpriseConfiguration:["PATCH /enterprises/{enterprise}/code-security/configurations/{configuration_id}"]},codesOfConduct:{getAllCodesOfConduct:["GET /codes_of_conduct"],getConductCode:["GET /codes_of_conduct/{key}"]},codespaces:{addRepositoryForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],checkPermissionsForDevcontainer:["GET /repos/{owner}/{repo}/codespaces/permissions_check"],codespaceMachinesForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/machines"],createForAuthenticatedUser:["POST /user/codespaces"],createOrUpdateOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],createOrUpdateSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}"],createWithPrForAuthenticatedUser:["POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces"],createWithRepoForAuthenticatedUser:["POST /repos/{owner}/{repo}/codespaces"],deleteForAuthenticatedUser:["DELETE /user/codespaces/{codespace_name}"],deleteFromOrganization:["DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}"],deleteOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],deleteSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}"],exportForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/exports"],getCodespacesForUserInOrg:["GET /orgs/{org}/members/{username}/codespaces"],getExportDetailsForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/exports/{export_id}"],getForAuthenticatedUser:["GET /user/codespaces/{codespace_name}"],getOrgPublicKey:["GET /orgs/{org}/codespaces/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}"],getPublicKeyForAuthenticatedUser:["GET /user/codespaces/secrets/public-key"],getRepoPublicKey:["GET /repos/{owner}/{repo}/codespaces/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],getSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}"],listDevcontainersInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/devcontainers"],listForAuthenticatedUser:["GET /user/codespaces"],listInOrganization:["GET /orgs/{org}/codespaces",{},{renamedParameters:{org_id:"org"}}],listInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces"],listOrgSecrets:["GET /orgs/{org}/codespaces/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/codespaces/secrets"],listRepositoriesForSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}/repositories"],listSecretsForAuthenticatedUser:["GET /user/codespaces/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],preFlightWithRepoForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/new"],publishForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/publish"],removeRepositoryForSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],repoMachinesForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/machines"],setRepositoriesForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],startForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/start"],stopForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/stop"],stopInOrganization:["POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop"],updateForAuthenticatedUser:["PATCH /user/codespaces/{codespace_name}"]},copilot:{addCopilotSeatsForTeams:["POST /orgs/{org}/copilot/billing/selected_teams"],addCopilotSeatsForUsers:["POST /orgs/{org}/copilot/billing/selected_users"],cancelCopilotSeatAssignmentForTeams:["DELETE /orgs/{org}/copilot/billing/selected_teams"],cancelCopilotSeatAssignmentForUsers:["DELETE /orgs/{org}/copilot/billing/selected_users"],copilotMetricsForOrganization:["GET /orgs/{org}/copilot/metrics"],copilotMetricsForTeam:["GET /orgs/{org}/team/{team_slug}/copilot/metrics"],getCopilotOrganizationDetails:["GET /orgs/{org}/copilot/billing"],getCopilotSeatDetailsForUser:["GET /orgs/{org}/members/{username}/copilot"],listCopilotSeats:["GET /orgs/{org}/copilot/billing/seats"],usageMetricsForOrg:["GET /orgs/{org}/copilot/usage"],usageMetricsForTeam:["GET /orgs/{org}/team/{team_slug}/copilot/usage"]},dependabot:{addSelectedRepoToOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],deleteOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],getAlert:["GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"],getOrgPublicKey:["GET /orgs/{org}/dependabot/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}"],getRepoPublicKey:["GET /repos/{owner}/{repo}/dependabot/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/dependabot/alerts"],listAlertsForOrg:["GET /orgs/{org}/dependabot/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/dependabot/alerts"],listOrgSecrets:["GET /orgs/{org}/dependabot/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/dependabot/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],updateAlert:["PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"]},dependencyGraph:{createRepositorySnapshot:["POST /repos/{owner}/{repo}/dependency-graph/snapshots"],diffRange:["GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}"],exportSbom:["GET /repos/{owner}/{repo}/dependency-graph/sbom"]},emojis:{get:["GET /emojis"]},gists:{checkIsStarred:["GET /gists/{gist_id}/star"],create:["POST /gists"],createComment:["POST /gists/{gist_id}/comments"],delete:["DELETE /gists/{gist_id}"],deleteComment:["DELETE /gists/{gist_id}/comments/{comment_id}"],fork:["POST /gists/{gist_id}/forks"],get:["GET /gists/{gist_id}"],getComment:["GET /gists/{gist_id}/comments/{comment_id}"],getRevision:["GET /gists/{gist_id}/{sha}"],list:["GET /gists"],listComments:["GET /gists/{gist_id}/comments"],listCommits:["GET /gists/{gist_id}/commits"],listForUser:["GET /users/{username}/gists"],listForks:["GET /gists/{gist_id}/forks"],listPublic:["GET /gists/public"],listStarred:["GET /gists/starred"],star:["PUT /gists/{gist_id}/star"],unstar:["DELETE /gists/{gist_id}/star"],update:["PATCH /gists/{gist_id}"],updateComment:["PATCH /gists/{gist_id}/comments/{comment_id}"]},git:{createBlob:["POST /repos/{owner}/{repo}/git/blobs"],createCommit:["POST /repos/{owner}/{repo}/git/commits"],createRef:["POST /repos/{owner}/{repo}/git/refs"],createTag:["POST /repos/{owner}/{repo}/git/tags"],createTree:["POST /repos/{owner}/{repo}/git/trees"],deleteRef:["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],getBlob:["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],getCommit:["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],getRef:["GET /repos/{owner}/{repo}/git/ref/{ref}"],getTag:["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],getTree:["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],listMatchingRefs:["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],updateRef:["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]},gitignore:{getAllTemplates:["GET /gitignore/templates"],getTemplate:["GET /gitignore/templates/{name}"]},interactions:{getRestrictionsForAuthenticatedUser:["GET /user/interaction-limits"],getRestrictionsForOrg:["GET /orgs/{org}/interaction-limits"],getRestrictionsForRepo:["GET /repos/{owner}/{repo}/interaction-limits"],getRestrictionsForYourPublicRepos:["GET /user/interaction-limits",{},{renamed:["interactions","getRestrictionsForAuthenticatedUser"]}],removeRestrictionsForAuthenticatedUser:["DELETE /user/interaction-limits"],removeRestrictionsForOrg:["DELETE /orgs/{org}/interaction-limits"],removeRestrictionsForRepo:["DELETE /repos/{owner}/{repo}/interaction-limits"],removeRestrictionsForYourPublicRepos:["DELETE /user/interaction-limits",{},{renamed:["interactions","removeRestrictionsForAuthenticatedUser"]}],setRestrictionsForAuthenticatedUser:["PUT /user/interaction-limits"],setRestrictionsForOrg:["PUT /orgs/{org}/interaction-limits"],setRestrictionsForRepo:["PUT /repos/{owner}/{repo}/interaction-limits"],setRestrictionsForYourPublicRepos:["PUT /user/interaction-limits",{},{renamed:["interactions","setRestrictionsForAuthenticatedUser"]}]},issues:{addAssignees:["POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"],addLabels:["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],addSubIssue:["POST /repos/{owner}/{repo}/issues/{issue_number}/sub_issues"],checkUserCanBeAssigned:["GET /repos/{owner}/{repo}/assignees/{assignee}"],checkUserCanBeAssignedToIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}"],create:["POST /repos/{owner}/{repo}/issues"],createComment:["POST /repos/{owner}/{repo}/issues/{issue_number}/comments"],createLabel:["POST /repos/{owner}/{repo}/labels"],createMilestone:["POST /repos/{owner}/{repo}/milestones"],deleteComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"],deleteLabel:["DELETE /repos/{owner}/{repo}/labels/{name}"],deleteMilestone:["DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"],get:["GET /repos/{owner}/{repo}/issues/{issue_number}"],getComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],getEvent:["GET /repos/{owner}/{repo}/issues/events/{event_id}"],getLabel:["GET /repos/{owner}/{repo}/labels/{name}"],getMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],list:["GET /issues"],listAssignees:["GET /repos/{owner}/{repo}/assignees"],listComments:["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],listCommentsForRepo:["GET /repos/{owner}/{repo}/issues/comments"],listEvents:["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],listEventsForRepo:["GET /repos/{owner}/{repo}/issues/events"],listEventsForTimeline:["GET /repos/{owner}/{repo}/issues/{issue_number}/timeline"],listForAuthenticatedUser:["GET /user/issues"],listForOrg:["GET /orgs/{org}/issues"],listForRepo:["GET /repos/{owner}/{repo}/issues"],listLabelsForMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"],listLabelsForRepo:["GET /repos/{owner}/{repo}/labels"],listLabelsOnIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/labels"],listMilestones:["GET /repos/{owner}/{repo}/milestones"],listSubIssues:["GET /repos/{owner}/{repo}/issues/{issue_number}/sub_issues"],lock:["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],removeAllLabels:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"],removeAssignees:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"],removeLabel:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"],removeSubIssue:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/sub_issue"],reprioritizeSubIssue:["PATCH /repos/{owner}/{repo}/issues/{issue_number}/sub_issues/priority"],setLabels:["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],unlock:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],update:["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],updateComment:["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],updateLabel:["PATCH /repos/{owner}/{repo}/labels/{name}"],updateMilestone:["PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"]},licenses:{get:["GET /licenses/{license}"],getAllCommonlyUsed:["GET /licenses"],getForRepo:["GET /repos/{owner}/{repo}/license"]},markdown:{render:["POST /markdown"],renderRaw:["POST /markdown/raw",{headers:{"content-type":"text/plain; charset=utf-8"}}]},meta:{get:["GET /meta"],getAllVersions:["GET /versions"],getOctocat:["GET /octocat"],getZen:["GET /zen"],root:["GET /"]},migrations:{deleteArchiveForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/archive"],deleteArchiveForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/archive"],downloadArchiveForOrg:["GET /orgs/{org}/migrations/{migration_id}/archive"],getArchiveForAuthenticatedUser:["GET /user/migrations/{migration_id}/archive"],getStatusForAuthenticatedUser:["GET /user/migrations/{migration_id}"],getStatusForOrg:["GET /orgs/{org}/migrations/{migration_id}"],listForAuthenticatedUser:["GET /user/migrations"],listForOrg:["GET /orgs/{org}/migrations"],listReposForAuthenticatedUser:["GET /user/migrations/{migration_id}/repositories"],listReposForOrg:["GET /orgs/{org}/migrations/{migration_id}/repositories"],listReposForUser:["GET /user/migrations/{migration_id}/repositories",{},{renamed:["migrations","listReposForAuthenticatedUser"]}],startForAuthenticatedUser:["POST /user/migrations"],startForOrg:["POST /orgs/{org}/migrations"],unlockRepoForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock"],unlockRepoForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"]},oidc:{getOidcCustomSubTemplateForOrg:["GET /orgs/{org}/actions/oidc/customization/sub"],updateOidcCustomSubTemplateForOrg:["PUT /orgs/{org}/actions/oidc/customization/sub"]},orgs:{addSecurityManagerTeam:["PUT /orgs/{org}/security-managers/teams/{team_slug}",{},{deprecated:"octokit.rest.orgs.addSecurityManagerTeam() is deprecated, see https://docs.github.com/rest/orgs/security-managers#add-a-security-manager-team"}],assignTeamToOrgRole:["PUT /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],assignUserToOrgRole:["PUT /orgs/{org}/organization-roles/users/{username}/{role_id}"],blockUser:["PUT /orgs/{org}/blocks/{username}"],cancelInvitation:["DELETE /orgs/{org}/invitations/{invitation_id}"],checkBlockedUser:["GET /orgs/{org}/blocks/{username}"],checkMembershipForUser:["GET /orgs/{org}/members/{username}"],checkPublicMembershipForUser:["GET /orgs/{org}/public_members/{username}"],convertMemberToOutsideCollaborator:["PUT /orgs/{org}/outside_collaborators/{username}"],createInvitation:["POST /orgs/{org}/invitations"],createOrUpdateCustomProperties:["PATCH /orgs/{org}/properties/schema"],createOrUpdateCustomPropertiesValuesForRepos:["PATCH /orgs/{org}/properties/values"],createOrUpdateCustomProperty:["PUT /orgs/{org}/properties/schema/{custom_property_name}"],createWebhook:["POST /orgs/{org}/hooks"],delete:["DELETE /orgs/{org}"],deleteWebhook:["DELETE /orgs/{org}/hooks/{hook_id}"],enableOrDisableSecurityProductOnAllOrgRepos:["POST /orgs/{org}/{security_product}/{enablement}",{},{deprecated:"octokit.rest.orgs.enableOrDisableSecurityProductOnAllOrgRepos() is deprecated, see https://docs.github.com/rest/orgs/orgs#enable-or-disable-a-security-feature-for-an-organization"}],get:["GET /orgs/{org}"],getAllCustomProperties:["GET /orgs/{org}/properties/schema"],getCustomProperty:["GET /orgs/{org}/properties/schema/{custom_property_name}"],getMembershipForAuthenticatedUser:["GET /user/memberships/orgs/{org}"],getMembershipForUser:["GET /orgs/{org}/memberships/{username}"],getOrgRole:["GET /orgs/{org}/organization-roles/{role_id}"],getWebhook:["GET /orgs/{org}/hooks/{hook_id}"],getWebhookConfigForOrg:["GET /orgs/{org}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"],list:["GET /organizations"],listAppInstallations:["GET /orgs/{org}/installations"],listAttestations:["GET /orgs/{org}/attestations/{subject_digest}"],listBlockedUsers:["GET /orgs/{org}/blocks"],listCustomPropertiesValuesForRepos:["GET /orgs/{org}/properties/values"],listFailedInvitations:["GET /orgs/{org}/failed_invitations"],listForAuthenticatedUser:["GET /user/orgs"],listForUser:["GET /users/{username}/orgs"],listInvitationTeams:["GET /orgs/{org}/invitations/{invitation_id}/teams"],listMembers:["GET /orgs/{org}/members"],listMembershipsForAuthenticatedUser:["GET /user/memberships/orgs"],listOrgRoleTeams:["GET /orgs/{org}/organization-roles/{role_id}/teams"],listOrgRoleUsers:["GET /orgs/{org}/organization-roles/{role_id}/users"],listOrgRoles:["GET /orgs/{org}/organization-roles"],listOrganizationFineGrainedPermissions:["GET /orgs/{org}/organization-fine-grained-permissions"],listOutsideCollaborators:["GET /orgs/{org}/outside_collaborators"],listPatGrantRepositories:["GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories"],listPatGrantRequestRepositories:["GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories"],listPatGrantRequests:["GET /orgs/{org}/personal-access-token-requests"],listPatGrants:["GET /orgs/{org}/personal-access-tokens"],listPendingInvitations:["GET /orgs/{org}/invitations"],listPublicMembers:["GET /orgs/{org}/public_members"],listSecurityManagerTeams:["GET /orgs/{org}/security-managers",{},{deprecated:"octokit.rest.orgs.listSecurityManagerTeams() is deprecated, see https://docs.github.com/rest/orgs/security-managers#list-security-manager-teams"}],listWebhookDeliveries:["GET /orgs/{org}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /orgs/{org}/hooks"],pingWebhook:["POST /orgs/{org}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeCustomProperty:["DELETE /orgs/{org}/properties/schema/{custom_property_name}"],removeMember:["DELETE /orgs/{org}/members/{username}"],removeMembershipForUser:["DELETE /orgs/{org}/memberships/{username}"],removeOutsideCollaborator:["DELETE /orgs/{org}/outside_collaborators/{username}"],removePublicMembershipForAuthenticatedUser:["DELETE /orgs/{org}/public_members/{username}"],removeSecurityManagerTeam:["DELETE /orgs/{org}/security-managers/teams/{team_slug}",{},{deprecated:"octokit.rest.orgs.removeSecurityManagerTeam() is deprecated, see https://docs.github.com/rest/orgs/security-managers#remove-a-security-manager-team"}],reviewPatGrantRequest:["POST /orgs/{org}/personal-access-token-requests/{pat_request_id}"],reviewPatGrantRequestsInBulk:["POST /orgs/{org}/personal-access-token-requests"],revokeAllOrgRolesTeam:["DELETE /orgs/{org}/organization-roles/teams/{team_slug}"],revokeAllOrgRolesUser:["DELETE /orgs/{org}/organization-roles/users/{username}"],revokeOrgRoleTeam:["DELETE /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],revokeOrgRoleUser:["DELETE /orgs/{org}/organization-roles/users/{username}/{role_id}"],setMembershipForUser:["PUT /orgs/{org}/memberships/{username}"],setPublicMembershipForAuthenticatedUser:["PUT /orgs/{org}/public_members/{username}"],unblockUser:["DELETE /orgs/{org}/blocks/{username}"],update:["PATCH /orgs/{org}"],updateMembershipForAuthenticatedUser:["PATCH /user/memberships/orgs/{org}"],updatePatAccess:["POST /orgs/{org}/personal-access-tokens/{pat_id}"],updatePatAccesses:["POST /orgs/{org}/personal-access-tokens"],updateWebhook:["PATCH /orgs/{org}/hooks/{hook_id}"],updateWebhookConfigForOrg:["PATCH /orgs/{org}/hooks/{hook_id}/config"]},packages:{deletePackageForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}"],deletePackageForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}"],deletePackageForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}"],deletePackageVersionForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getAllPackageVersionsForAPackageOwnedByAnOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByOrg"]}],getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByAuthenticatedUser"]}],getAllPackageVersionsForPackageOwnedByAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions"],getPackageForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}"],getPackageForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}"],getPackageForUser:["GET /users/{username}/packages/{package_type}/{package_name}"],getPackageVersionForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],listDockerMigrationConflictingPackagesForAuthenticatedUser:["GET /user/docker/conflicts"],listDockerMigrationConflictingPackagesForOrganization:["GET /orgs/{org}/docker/conflicts"],listDockerMigrationConflictingPackagesForUser:["GET /users/{username}/docker/conflicts"],listPackagesForAuthenticatedUser:["GET /user/packages"],listPackagesForOrganization:["GET /orgs/{org}/packages"],listPackagesForUser:["GET /users/{username}/packages"],restorePackageForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForUser:["POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageVersionForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForUser:["POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"]},privateRegistries:{createOrgPrivateRegistry:["POST /orgs/{org}/private-registries"],deleteOrgPrivateRegistry:["DELETE /orgs/{org}/private-registries/{secret_name}"],getOrgPrivateRegistry:["GET /orgs/{org}/private-registries/{secret_name}"],getOrgPublicKey:["GET /orgs/{org}/private-registries/public-key"],listOrgPrivateRegistries:["GET /orgs/{org}/private-registries"],updateOrgPrivateRegistry:["PATCH /orgs/{org}/private-registries/{secret_name}"]},projects:{addCollaborator:["PUT /projects/{project_id}/collaborators/{username}"],createCard:["POST /projects/columns/{column_id}/cards"],createColumn:["POST /projects/{project_id}/columns"],createForAuthenticatedUser:["POST /user/projects"],createForOrg:["POST /orgs/{org}/projects"],createForRepo:["POST /repos/{owner}/{repo}/projects"],delete:["DELETE /projects/{project_id}"],deleteCard:["DELETE /projects/columns/cards/{card_id}"],deleteColumn:["DELETE /projects/columns/{column_id}"],get:["GET /projects/{project_id}"],getCard:["GET /projects/columns/cards/{card_id}"],getColumn:["GET /projects/columns/{column_id}"],getPermissionForUser:["GET /projects/{project_id}/collaborators/{username}/permission"],listCards:["GET /projects/columns/{column_id}/cards"],listCollaborators:["GET /projects/{project_id}/collaborators"],listColumns:["GET /projects/{project_id}/columns"],listForOrg:["GET /orgs/{org}/projects"],listForRepo:["GET /repos/{owner}/{repo}/projects"],listForUser:["GET /users/{username}/projects"],moveCard:["POST /projects/columns/cards/{card_id}/moves"],moveColumn:["POST /projects/columns/{column_id}/moves"],removeCollaborator:["DELETE /projects/{project_id}/collaborators/{username}"],update:["PATCH /projects/{project_id}"],updateCard:["PATCH /projects/columns/cards/{card_id}"],updateColumn:["PATCH /projects/columns/{column_id}"]},pulls:{checkIfMerged:["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],create:["POST /repos/{owner}/{repo}/pulls"],createReplyForReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"],createReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],createReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"],deletePendingReview:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],deleteReviewComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"],dismissReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"],get:["GET /repos/{owner}/{repo}/pulls/{pull_number}"],getReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],getReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],list:["GET /repos/{owner}/{repo}/pulls"],listCommentsForReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"],listCommits:["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],listFiles:["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],listRequestedReviewers:["GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],listReviewComments:["GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"],listReviewCommentsForRepo:["GET /repos/{owner}/{repo}/pulls/comments"],listReviews:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],merge:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],removeRequestedReviewers:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],requestReviewers:["POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],submitReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"],update:["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],updateBranch:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"],updateReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],updateReviewComment:["PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"]},rateLimit:{get:["GET /rate_limit"]},reactions:{createForCommitComment:["POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"],createForIssue:["POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"],createForIssueComment:["POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],createForPullRequestReviewComment:["POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],createForRelease:["POST /repos/{owner}/{repo}/releases/{release_id}/reactions"],createForTeamDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],createForTeamDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"],deleteForCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"],deleteForIssue:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"],deleteForIssueComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"],deleteForPullRequestComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"],deleteForRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}"],deleteForTeamDiscussion:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"],deleteForTeamDiscussionComment:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"],listForCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}/reactions"],listForIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"],listForIssueComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],listForPullRequestReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],listForRelease:["GET /repos/{owner}/{repo}/releases/{release_id}/reactions"],listForTeamDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],listForTeamDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"]},repos:{acceptInvitation:["PATCH /user/repository_invitations/{invitation_id}",{},{renamed:["repos","acceptInvitationForAuthenticatedUser"]}],acceptInvitationForAuthenticatedUser:["PATCH /user/repository_invitations/{invitation_id}"],addAppAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],addCollaborator:["PUT /repos/{owner}/{repo}/collaborators/{username}"],addStatusCheckContexts:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],addTeamAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],addUserAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],cancelPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel"],checkAutomatedSecurityFixes:["GET /repos/{owner}/{repo}/automated-security-fixes"],checkCollaborator:["GET /repos/{owner}/{repo}/collaborators/{username}"],checkPrivateVulnerabilityReporting:["GET /repos/{owner}/{repo}/private-vulnerability-reporting"],checkVulnerabilityAlerts:["GET /repos/{owner}/{repo}/vulnerability-alerts"],codeownersErrors:["GET /repos/{owner}/{repo}/codeowners/errors"],compareCommits:["GET /repos/{owner}/{repo}/compare/{base}...{head}"],compareCommitsWithBasehead:["GET /repos/{owner}/{repo}/compare/{basehead}"],createAttestation:["POST /repos/{owner}/{repo}/attestations"],createAutolink:["POST /repos/{owner}/{repo}/autolinks"],createCommitComment:["POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"],createCommitSignatureProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],createCommitStatus:["POST /repos/{owner}/{repo}/statuses/{sha}"],createDeployKey:["POST /repos/{owner}/{repo}/keys"],createDeployment:["POST /repos/{owner}/{repo}/deployments"],createDeploymentBranchPolicy:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],createDeploymentProtectionRule:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],createDeploymentStatus:["POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],createDispatchEvent:["POST /repos/{owner}/{repo}/dispatches"],createForAuthenticatedUser:["POST /user/repos"],createFork:["POST /repos/{owner}/{repo}/forks"],createInOrg:["POST /orgs/{org}/repos"],createOrUpdateCustomPropertiesValues:["PATCH /repos/{owner}/{repo}/properties/values"],createOrUpdateEnvironment:["PUT /repos/{owner}/{repo}/environments/{environment_name}"],createOrUpdateFileContents:["PUT /repos/{owner}/{repo}/contents/{path}"],createOrgRuleset:["POST /orgs/{org}/rulesets"],createPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployments"],createPagesSite:["POST /repos/{owner}/{repo}/pages"],createRelease:["POST /repos/{owner}/{repo}/releases"],createRepoRuleset:["POST /repos/{owner}/{repo}/rulesets"],createUsingTemplate:["POST /repos/{template_owner}/{template_repo}/generate"],createWebhook:["POST /repos/{owner}/{repo}/hooks"],declineInvitation:["DELETE /user/repository_invitations/{invitation_id}",{},{renamed:["repos","declineInvitationForAuthenticatedUser"]}],declineInvitationForAuthenticatedUser:["DELETE /user/repository_invitations/{invitation_id}"],delete:["DELETE /repos/{owner}/{repo}"],deleteAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],deleteAdminBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],deleteAnEnvironment:["DELETE /repos/{owner}/{repo}/environments/{environment_name}"],deleteAutolink:["DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"],deleteBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection"],deleteCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],deleteCommitSignatureProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],deleteDeployKey:["DELETE /repos/{owner}/{repo}/keys/{key_id}"],deleteDeployment:["DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"],deleteDeploymentBranchPolicy:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],deleteFile:["DELETE /repos/{owner}/{repo}/contents/{path}"],deleteInvitation:["DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"],deleteOrgRuleset:["DELETE /orgs/{org}/rulesets/{ruleset_id}"],deletePagesSite:["DELETE /repos/{owner}/{repo}/pages"],deletePullRequestReviewProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],deleteRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}"],deleteReleaseAsset:["DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"],deleteRepoRuleset:["DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}"],deleteWebhook:["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],disableAutomatedSecurityFixes:["DELETE /repos/{owner}/{repo}/automated-security-fixes"],disableDeploymentProtectionRule:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],disablePrivateVulnerabilityReporting:["DELETE /repos/{owner}/{repo}/private-vulnerability-reporting"],disableVulnerabilityAlerts:["DELETE /repos/{owner}/{repo}/vulnerability-alerts"],downloadArchive:["GET /repos/{owner}/{repo}/zipball/{ref}",{},{renamed:["repos","downloadZipballArchive"]}],downloadTarballArchive:["GET /repos/{owner}/{repo}/tarball/{ref}"],downloadZipballArchive:["GET /repos/{owner}/{repo}/zipball/{ref}"],enableAutomatedSecurityFixes:["PUT /repos/{owner}/{repo}/automated-security-fixes"],enablePrivateVulnerabilityReporting:["PUT /repos/{owner}/{repo}/private-vulnerability-reporting"],enableVulnerabilityAlerts:["PUT /repos/{owner}/{repo}/vulnerability-alerts"],generateReleaseNotes:["POST /repos/{owner}/{repo}/releases/generate-notes"],get:["GET /repos/{owner}/{repo}"],getAccessRestrictions:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],getAdminBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],getAllDeploymentProtectionRules:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],getAllEnvironments:["GET /repos/{owner}/{repo}/environments"],getAllStatusCheckContexts:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"],getAllTopics:["GET /repos/{owner}/{repo}/topics"],getAppsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"],getAutolink:["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],getBranch:["GET /repos/{owner}/{repo}/branches/{branch}"],getBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection"],getBranchRules:["GET /repos/{owner}/{repo}/rules/branches/{branch}"],getClones:["GET /repos/{owner}/{repo}/traffic/clones"],getCodeFrequencyStats:["GET /repos/{owner}/{repo}/stats/code_frequency"],getCollaboratorPermissionLevel:["GET /repos/{owner}/{repo}/collaborators/{username}/permission"],getCombinedStatusForRef:["GET /repos/{owner}/{repo}/commits/{ref}/status"],getCommit:["GET /repos/{owner}/{repo}/commits/{ref}"],getCommitActivityStats:["GET /repos/{owner}/{repo}/stats/commit_activity"],getCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}"],getCommitSignatureProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],getCommunityProfileMetrics:["GET /repos/{owner}/{repo}/community/profile"],getContent:["GET /repos/{owner}/{repo}/contents/{path}"],getContributorsStats:["GET /repos/{owner}/{repo}/stats/contributors"],getCustomDeploymentProtectionRule:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],getCustomPropertiesValues:["GET /repos/{owner}/{repo}/properties/values"],getDeployKey:["GET /repos/{owner}/{repo}/keys/{key_id}"],getDeployment:["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],getDeploymentBranchPolicy:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],getDeploymentStatus:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"],getEnvironment:["GET /repos/{owner}/{repo}/environments/{environment_name}"],getLatestPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/latest"],getLatestRelease:["GET /repos/{owner}/{repo}/releases/latest"],getOrgRuleSuite:["GET /orgs/{org}/rulesets/rule-suites/{rule_suite_id}"],getOrgRuleSuites:["GET /orgs/{org}/rulesets/rule-suites"],getOrgRuleset:["GET /orgs/{org}/rulesets/{ruleset_id}"],getOrgRulesets:["GET /orgs/{org}/rulesets"],getPages:["GET /repos/{owner}/{repo}/pages"],getPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],getPagesDeployment:["GET /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}"],getPagesHealthCheck:["GET /repos/{owner}/{repo}/pages/health"],getParticipationStats:["GET /repos/{owner}/{repo}/stats/participation"],getPullRequestReviewProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],getPunchCardStats:["GET /repos/{owner}/{repo}/stats/punch_card"],getReadme:["GET /repos/{owner}/{repo}/readme"],getReadmeInDirectory:["GET /repos/{owner}/{repo}/readme/{dir}"],getRelease:["GET /repos/{owner}/{repo}/releases/{release_id}"],getReleaseAsset:["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],getReleaseByTag:["GET /repos/{owner}/{repo}/releases/tags/{tag}"],getRepoRuleSuite:["GET /repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}"],getRepoRuleSuites:["GET /repos/{owner}/{repo}/rulesets/rule-suites"],getRepoRuleset:["GET /repos/{owner}/{repo}/rulesets/{ruleset_id}"],getRepoRulesets:["GET /repos/{owner}/{repo}/rulesets"],getStatusChecksProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],getTeamsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"],getTopPaths:["GET /repos/{owner}/{repo}/traffic/popular/paths"],getTopReferrers:["GET /repos/{owner}/{repo}/traffic/popular/referrers"],getUsersWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"],getViews:["GET /repos/{owner}/{repo}/traffic/views"],getWebhook:["GET /repos/{owner}/{repo}/hooks/{hook_id}"],getWebhookConfigForRepo:["GET /repos/{owner}/{repo}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"],listActivities:["GET /repos/{owner}/{repo}/activity"],listAttestations:["GET /repos/{owner}/{repo}/attestations/{subject_digest}"],listAutolinks:["GET /repos/{owner}/{repo}/autolinks"],listBranches:["GET /repos/{owner}/{repo}/branches"],listBranchesForHeadCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"],listCollaborators:["GET /repos/{owner}/{repo}/collaborators"],listCommentsForCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"],listCommitCommentsForRepo:["GET /repos/{owner}/{repo}/comments"],listCommitStatusesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/statuses"],listCommits:["GET /repos/{owner}/{repo}/commits"],listContributors:["GET /repos/{owner}/{repo}/contributors"],listCustomDeploymentRuleIntegrations:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps"],listDeployKeys:["GET /repos/{owner}/{repo}/keys"],listDeploymentBranchPolicies:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],listDeploymentStatuses:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],listDeployments:["GET /repos/{owner}/{repo}/deployments"],listForAuthenticatedUser:["GET /user/repos"],listForOrg:["GET /orgs/{org}/repos"],listForUser:["GET /users/{username}/repos"],listForks:["GET /repos/{owner}/{repo}/forks"],listInvitations:["GET /repos/{owner}/{repo}/invitations"],listInvitationsForAuthenticatedUser:["GET /user/repository_invitations"],listLanguages:["GET /repos/{owner}/{repo}/languages"],listPagesBuilds:["GET /repos/{owner}/{repo}/pages/builds"],listPublic:["GET /repositories"],listPullRequestsAssociatedWithCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls"],listReleaseAssets:["GET /repos/{owner}/{repo}/releases/{release_id}/assets"],listReleases:["GET /repos/{owner}/{repo}/releases"],listTags:["GET /repos/{owner}/{repo}/tags"],listTeams:["GET /repos/{owner}/{repo}/teams"],listWebhookDeliveries:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /repos/{owner}/{repo}/hooks"],merge:["POST /repos/{owner}/{repo}/merges"],mergeUpstream:["POST /repos/{owner}/{repo}/merge-upstream"],pingWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeAppAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],removeCollaborator:["DELETE /repos/{owner}/{repo}/collaborators/{username}"],removeStatusCheckContexts:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],removeStatusCheckProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],removeTeamAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],removeUserAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],renameBranch:["POST /repos/{owner}/{repo}/branches/{branch}/rename"],replaceAllTopics:["PUT /repos/{owner}/{repo}/topics"],requestPagesBuild:["POST /repos/{owner}/{repo}/pages/builds"],setAdminBranchProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],setAppAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],setStatusCheckContexts:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],setTeamAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],setUserAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],testPushWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],transfer:["POST /repos/{owner}/{repo}/transfer"],update:["PATCH /repos/{owner}/{repo}"],updateBranchProtection:["PUT /repos/{owner}/{repo}/branches/{branch}/protection"],updateCommitComment:["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],updateDeploymentBranchPolicy:["PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],updateInformationAboutPagesSite:["PUT /repos/{owner}/{repo}/pages"],updateInvitation:["PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"],updateOrgRuleset:["PUT /orgs/{org}/rulesets/{ruleset_id}"],updatePullRequestReviewProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],updateRelease:["PATCH /repos/{owner}/{repo}/releases/{release_id}"],updateReleaseAsset:["PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"],updateRepoRuleset:["PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}"],updateStatusCheckPotection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",{},{renamed:["repos","updateStatusCheckProtection"]}],updateStatusCheckProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],updateWebhook:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],updateWebhookConfigForRepo:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"],uploadReleaseAsset:["POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",{baseUrl:"https://uploads.github.com"}]},search:{code:["GET /search/code"],commits:["GET /search/commits"],issuesAndPullRequests:["GET /search/issues"],labels:["GET /search/labels"],repos:["GET /search/repositories"],topics:["GET /search/topics"],users:["GET /search/users"]},secretScanning:{createPushProtectionBypass:["POST /repos/{owner}/{repo}/secret-scanning/push-protection-bypasses"],getAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"],getScanHistory:["GET /repos/{owner}/{repo}/secret-scanning/scan-history"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/secret-scanning/alerts"],listAlertsForOrg:["GET /orgs/{org}/secret-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/secret-scanning/alerts"],listLocationsForAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations"],updateAlert:["PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"]},securityAdvisories:{createFork:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks"],createPrivateVulnerabilityReport:["POST /repos/{owner}/{repo}/security-advisories/reports"],createRepositoryAdvisory:["POST /repos/{owner}/{repo}/security-advisories"],createRepositoryAdvisoryCveRequest:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve"],getGlobalAdvisory:["GET /advisories/{ghsa_id}"],getRepositoryAdvisory:["GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}"],listGlobalAdvisories:["GET /advisories"],listOrgRepositoryAdvisories:["GET /orgs/{org}/security-advisories"],listRepositoryAdvisories:["GET /repos/{owner}/{repo}/security-advisories"],updateRepositoryAdvisory:["PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}"]},teams:{addOrUpdateMembershipForUserInOrg:["PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"],addOrUpdateProjectPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}"],addOrUpdateRepoPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],checkPermissionsForProjectInOrg:["GET /orgs/{org}/teams/{team_slug}/projects/{project_id}"],checkPermissionsForRepoInOrg:["GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],create:["POST /orgs/{org}/teams"],createDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],createDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions"],deleteDiscussionCommentInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],deleteDiscussionInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],deleteInOrg:["DELETE /orgs/{org}/teams/{team_slug}"],getByName:["GET /orgs/{org}/teams/{team_slug}"],getDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],getDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],getMembershipForUserInOrg:["GET /orgs/{org}/teams/{team_slug}/memberships/{username}"],list:["GET /orgs/{org}/teams"],listChildInOrg:["GET /orgs/{org}/teams/{team_slug}/teams"],listDiscussionCommentsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],listDiscussionsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions"],listForAuthenticatedUser:["GET /user/teams"],listMembersInOrg:["GET /orgs/{org}/teams/{team_slug}/members"],listPendingInvitationsInOrg:["GET /orgs/{org}/teams/{team_slug}/invitations"],listProjectsInOrg:["GET /orgs/{org}/teams/{team_slug}/projects"],listReposInOrg:["GET /orgs/{org}/teams/{team_slug}/repos"],removeMembershipForUserInOrg:["DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"],removeProjectInOrg:["DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"],removeRepoInOrg:["DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],updateDiscussionCommentInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],updateDiscussionInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],updateInOrg:["PATCH /orgs/{org}/teams/{team_slug}"]},users:{addEmailForAuthenticated:["POST /user/emails",{},{renamed:["users","addEmailForAuthenticatedUser"]}],addEmailForAuthenticatedUser:["POST /user/emails"],addSocialAccountForAuthenticatedUser:["POST /user/social_accounts"],block:["PUT /user/blocks/{username}"],checkBlocked:["GET /user/blocks/{username}"],checkFollowingForUser:["GET /users/{username}/following/{target_user}"],checkPersonIsFollowedByAuthenticated:["GET /user/following/{username}"],createGpgKeyForAuthenticated:["POST /user/gpg_keys",{},{renamed:["users","createGpgKeyForAuthenticatedUser"]}],createGpgKeyForAuthenticatedUser:["POST /user/gpg_keys"],createPublicSshKeyForAuthenticated:["POST /user/keys",{},{renamed:["users","createPublicSshKeyForAuthenticatedUser"]}],createPublicSshKeyForAuthenticatedUser:["POST /user/keys"],createSshSigningKeyForAuthenticatedUser:["POST /user/ssh_signing_keys"],deleteEmailForAuthenticated:["DELETE /user/emails",{},{renamed:["users","deleteEmailForAuthenticatedUser"]}],deleteEmailForAuthenticatedUser:["DELETE /user/emails"],deleteGpgKeyForAuthenticated:["DELETE /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","deleteGpgKeyForAuthenticatedUser"]}],deleteGpgKeyForAuthenticatedUser:["DELETE /user/gpg_keys/{gpg_key_id}"],deletePublicSshKeyForAuthenticated:["DELETE /user/keys/{key_id}",{},{renamed:["users","deletePublicSshKeyForAuthenticatedUser"]}],deletePublicSshKeyForAuthenticatedUser:["DELETE /user/keys/{key_id}"],deleteSocialAccountForAuthenticatedUser:["DELETE /user/social_accounts"],deleteSshSigningKeyForAuthenticatedUser:["DELETE /user/ssh_signing_keys/{ssh_signing_key_id}"],follow:["PUT /user/following/{username}"],getAuthenticated:["GET /user"],getById:["GET /user/{account_id}"],getByUsername:["GET /users/{username}"],getContextForUser:["GET /users/{username}/hovercard"],getGpgKeyForAuthenticated:["GET /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","getGpgKeyForAuthenticatedUser"]}],getGpgKeyForAuthenticatedUser:["GET /user/gpg_keys/{gpg_key_id}"],getPublicSshKeyForAuthenticated:["GET /user/keys/{key_id}",{},{renamed:["users","getPublicSshKeyForAuthenticatedUser"]}],getPublicSshKeyForAuthenticatedUser:["GET /user/keys/{key_id}"],getSshSigningKeyForAuthenticatedUser:["GET /user/ssh_signing_keys/{ssh_signing_key_id}"],list:["GET /users"],listAttestations:["GET /users/{username}/attestations/{subject_digest}"],listBlockedByAuthenticated:["GET /user/blocks",{},{renamed:["users","listBlockedByAuthenticatedUser"]}],listBlockedByAuthenticatedUser:["GET /user/blocks"],listEmailsForAuthenticated:["GET /user/emails",{},{renamed:["users","listEmailsForAuthenticatedUser"]}],listEmailsForAuthenticatedUser:["GET /user/emails"],listFollowedByAuthenticated:["GET /user/following",{},{renamed:["users","listFollowedByAuthenticatedUser"]}],listFollowedByAuthenticatedUser:["GET /user/following"],listFollowersForAuthenticatedUser:["GET /user/followers"],listFollowersForUser:["GET /users/{username}/followers"],listFollowingForUser:["GET /users/{username}/following"],listGpgKeysForAuthenticated:["GET /user/gpg_keys",{},{renamed:["users","listGpgKeysForAuthenticatedUser"]}],listGpgKeysForAuthenticatedUser:["GET /user/gpg_keys"],listGpgKeysForUser:["GET /users/{username}/gpg_keys"],listPublicEmailsForAuthenticated:["GET /user/public_emails",{},{renamed:["users","listPublicEmailsForAuthenticatedUser"]}],listPublicEmailsForAuthenticatedUser:["GET /user/public_emails"],listPublicKeysForUser:["GET /users/{username}/keys"],listPublicSshKeysForAuthenticated:["GET /user/keys",{},{renamed:["users","listPublicSshKeysForAuthenticatedUser"]}],listPublicSshKeysForAuthenticatedUser:["GET /user/keys"],listSocialAccountsForAuthenticatedUser:["GET /user/social_accounts"],listSocialAccountsForUser:["GET /users/{username}/social_accounts"],listSshSigningKeysForAuthenticatedUser:["GET /user/ssh_signing_keys"],listSshSigningKeysForUser:["GET /users/{username}/ssh_signing_keys"],setPrimaryEmailVisibilityForAuthenticated:["PATCH /user/email/visibility",{},{renamed:["users","setPrimaryEmailVisibilityForAuthenticatedUser"]}],setPrimaryEmailVisibilityForAuthenticatedUser:["PATCH /user/email/visibility"],unblock:["DELETE /user/blocks/{username}"],unfollow:["DELETE /user/following/{username}"],updateAuthenticated:["PATCH /user"]}}))for(let[r,s]of Object.entries(t)){let[t,o,i]=s,[n,a]=t.split(/ /),c=Object.assign({method:n,url:a},o);D.has(e)||D.set(e,new Map),D.get(e).set(r,{scope:e,methodName:r,endpointDefaults:c,decorations:i})}let L={has:({scope:e},t)=>D.get(e).has(t),getOwnPropertyDescriptor(e,t){return{value:this.get(e,t),configurable:!0,writable:!0,enumerable:!0}},defineProperty:(e,t,r)=>(Object.defineProperty(e.cache,t,r),!0),deleteProperty:(e,t)=>(delete e.cache[t],!0),ownKeys:({scope:e})=>[...D.get(e).keys()],set:(e,t,r)=>e.cache[t]=r,get({octokit:e,scope:t,cache:r},s){if(r[s])return r[s];let o=D.get(t).get(s);if(!o)return;let{endpointDefaults:i,decorations:n}=o;return n?r[s]=function(e,t,r,s,o){let i=e.request.defaults(s);return Object.assign(function(...s){let n=i.endpoint.merge(...s);if(o.mapToData)return i(n=Object.assign({},n,{data:n[o.mapToData],[o.mapToData]:void 0}));if(o.renamed){let[s,i]=o.renamed;e.log.warn(`octokit.${t}.${r}() has been renamed to octokit.${s}.${i}()`)}if(o.deprecated&&e.log.warn(o.deprecated),o.renamedParameters){let n=i.endpoint.merge(...s);for(let[s,i]of Object.entries(o.renamedParameters))s in n&&(e.log.warn(`"${s}" parameter is deprecated for "octokit.${t}.${r}()". Use "${i}" instead`),i in n||(n[i]=n[s]),delete n[s]);return i(n)}return i(...s)},i)}(e,t,s,i,n):r[s]=e.request.defaults(i),r[s]}};function I(e){let t=function(e){let t={};for(let r of D.keys())t[r]=new Proxy({octokit:e,scope:r,cache:{}},L);return t}(e);return{...t,rest:t}}I.VERSION="13.3.2-cjs.1";var j=O.plugin(F,I,C).defaults({userAgent:"octokit-rest.js/20.1.2"}),q=r(96815);class x{constructor(){this.config={appId:process.env.GITHUB_APP_ID,privateKey:process.env.GITHUB_APP_PRIVATE_KEY.replace(/\\n/g,"\n"),clientId:process.env.GITHUB_APP_CLIENT_ID,clientSecret:process.env.GITHUB_APP_CLIENT_SECRET},this.octokit=new j({authStrategy:l.createAppAuth,auth:{appId:this.config.appId,privateKey:this.config.privateKey,clientId:this.config.clientId,clientSecret:this.config.clientSecret}})}async createRepository(e,t,r,s){try{let{data:o}=await this.octokit.rest.apps.getInstallation({installation_id:parseInt(e)}),i=new j({auth:`token ${o.access_tokens_url}`}),{data:n}=await i.rest.repos.createUsingTemplate({template_owner:process.env.TEMPLATE_REPO_OWNER||"Gabrielleubitz",template_repo:process.env.TEMPLATE_REPO_NAME||"Igani-w-g",owner:t,name:r,description:`Event site generated by Igani - ${s.site?.brandName||"Unknown Brand"}`,private:!0}),a="initial-setup",{data:c}=await i.rest.repos.getBranch({owner:t,repo:r,branch:n.default_branch});for(let e of(await i.rest.git.createRef({owner:t,repo:r,ref:`refs/heads/${a}`,sha:c.commit.sha}),[{path:q.Ad.CONTENT.SITE,content:JSON.stringify(s.site,null,2)},{path:q.Ad.CONTENT.EMAILS,content:JSON.stringify(s.emails,null,2)},{path:q.Ad.CONTENT.SMS,content:JSON.stringify(s.sms,null,2)},{path:q.Ad.BRANDING.THEME,content:JSON.stringify(s.theme,null,2)},{path:"README-SETUP.md",content:this.generateReadme(s.site?.brandName||"Your Event Site")}]))await i.rest.repos.createOrUpdateFileContents({owner:t,repo:r,path:e.path,message:`Add ${e.path}`,content:Buffer.from(e.content).toString("base64"),branch:a});let{data:l}=await i.rest.pulls.create({owner:t,repo:r,title:"Initial event site setup",head:a,base:n.default_branch,body:"Generated event site content and configuration"});return await i.rest.pulls.merge({owner:t,repo:r,pull_number:l.number,commit_title:"Initial event site setup",merge_method:"squash"}),await i.rest.git.deleteRef({owner:t,repo:r,ref:`heads/${a}`}),{repoUrl:n.html_url,cloneUrl:n.clone_url,commitSha:l.merge_commit_sha}}catch(e){throw console.error("GitHub repository creation error:",e),Error("Failed to create GitHub repository")}}async uploadAsset(e,t,r,s,o,i){try{let n=new j({auth:`token ${e}`});return await n.rest.repos.createOrUpdateFileContents({owner:t,repo:r,path:s,message:i,content:o.toString("base64")}),{success:!0}}catch(e){throw console.error("Asset upload error:",e),Error("Failed to upload asset to repository")}}generateReadme(e){return`# ${e} Event Site

This is your custom event site generated by Igani. Follow the steps below to deploy it to your infrastructure.

## Quick Start

1. **Environment Setup**
   Copy \`.env.example\` to \`.env.local\` and fill in your values:
   
   \`\`\`bash
   cp .env.example .env.local
   \`\`\`

2. **Install Dependencies**
   \`\`\`bash
   pnpm install
   \`\`\`

3. **Run Locally**
   \`\`\`bash
   pnpm dev
   \`\`\`

## Environment Variables

### Required
- \`PUBLIC_SITE_URL\` - Your domain (e.g., https://events.yourcompany.com)
- \`DATABASE_URL\` - Your database connection string

### Email (Choose One)
- **Mailjet**: \`MAILJET_API_KEY\`, \`MAILJET_API_SECRET\`
- **SendGrid**: \`SENDGRID_API_KEY\`
- **Resend**: \`RESEND_API_KEY\`

### SMS (Optional)
- **Twilio**: \`TWILIO_ACCOUNT_SID\`, \`TWILIO_AUTH_TOKEN\`, \`TWILIO_PHONE_NUMBER\`
- **AWS SNS**: \`AWS_ACCESS_KEY_ID\`, \`AWS_SECRET_ACCESS_KEY\`, \`AWS_REGION\`

### Database Options

#### Option 1: Supabase (Recommended)
1. Create a new project at [supabase.com](https://supabase.com)
2. Go to Settings → Database
3. Copy your connection string to \`DATABASE_URL\`

#### Option 2: Firebase
1. Create a Firebase project
2. Enable Firestore
3. Download your service account key
4. Set \`FIREBASE_PROJECT_ID\`, \`FIREBASE_CLIENT_EMAIL\`, \`FIREBASE_PRIVATE_KEY\`

## Deploy to Vercel

[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/clone?repository-url=${encodeURIComponent(`https://github.com/${e.toLowerCase().replace(/\s+/g,"-")}-events`)}&project-name=${encodeURIComponent(e.toLowerCase().replace(/\s+/g,"-"))}-events&env=PUBLIC_SITE_URL,DATABASE_URL,MAILJET_API_KEY,MAILJET_API_SECRET)

## Customization

### Content
Edit files in \`content/default/\`:
- \`content.json\` - Site copy and text
- \`emails.json\` - Email templates  
- \`sms.json\` - SMS message templates

### Branding
Edit \`branding/default/theme.json\` for:
- Colors and typography
- Logo paths
- Brand-specific styling

Replace files in \`public/branding/default/\`:
- \`logo.svg\` - Your logo (light theme)
- \`logo-white.svg\` - Your logo (dark theme)
- \`hero.jpg\` - Hero image

### Advanced
The site uses Next.js 14 with:
- TypeScript
- Tailwind CSS
- Prisma ORM
- Framer Motion

## Support

For setup assistance or customization help, contact [support@igani.co](mailto:support@igani.co).

Generated by [Igani](https://igani.co) - AI-powered event sites.`}}let z="force-dynamic",$="nodejs";async function B(e){try{let{orderId:t}=await e.json();if(!t)return a.NextResponse.json({error:"Missing orderId"},{status:400});let r=await c._.order.findUnique({where:{id:t},include:{customer:!0,questionnaire:!0,generatedCopy:!0,delivery:!0}});if(!r||!r.generatedCopy)return a.NextResponse.json({error:"Order or generated copy not found"},{status:404});if(r.delivery?.repoUrl)return a.NextResponse.json({success:!0,repoUrl:r.delivery.repoUrl,message:"Repository already exists"});let s=r.generatedCopy.site?.brandName||"event-site",o=`events-${s.toLowerCase().replace(/[^a-z0-9]/g,"-")}`,i=new x;try{let e=await i.createRepository("placeholder-installation-id","buyer-username",o,r.generatedCopy),s=await c._.delivery.create({data:{orderId:t,method:"GITHUB",repoUrl:e.repoUrl,commitSha:e.commitSha}});return a.NextResponse.json({success:!0,delivery:s,repoUrl:e.repoUrl,message:"Repository created successfully"})}catch(r){console.error("GitHub repository creation failed, falling back to ZIP:",r);let e=await c._.delivery.create({data:{orderId:t,method:"ZIP",zipUrl:`http://localhost:3000/api/download/${t}`,commitSha:null}});return a.NextResponse.json({success:!0,delivery:e,message:"Created ZIP package as fallback (GitHub setup required for repo creation)"})}}catch(e){return console.error("Repository creation error:",e),a.NextResponse.json({error:"Failed to create repository"},{status:500})}}let M=new o.AppRouteRouteModule({definition:{kind:i.x.APP_ROUTE,page:"/api/create-repo/route",pathname:"/api/create-repo",filename:"route",bundlePath:"app/api/create-repo/route"},resolvedPagePath:"/Users/gabriel/Downloads/igani/app/api/create-repo/route.ts",nextConfigOutput:"",userland:s}),{requestAsyncStorage:W,staticGenerationAsyncStorage:H,serverHooks:N}=M,V="/api/create-repo/route";function K(){return(0,n.patchFetch)({serverHooks:N,staticGenerationAsyncStorage:H})}},72331:(e,t,r)=>{"use strict";r.d(t,{_:()=>o});var s=r(53524);let o=globalThis.prisma??new s.PrismaClient},96815:(e,t,r)=>{"use strict";r.d(t,{Ad:()=>s});let s={CONTENT:{SITE:"content/site.json",EMAILS:"content/emails.json",SMS:"content/sms.json"},BRANDING:{THEME:"theme.json",COLORS:"styles/colors.json"},ASSETS:{LOGOS:"public/assets/logos",IMAGES:"public/assets/images",BRANDING:"public/branding"},CONFIG:{ENV_EXAMPLE:".env.example",PACKAGE_JSON:"package.json",README:"README.md"}}},39173:(e,t,r)=>{"use strict";let s,o,i;var n=Object.create,a=Object.defineProperty,c=Object.getOwnPropertyDescriptor,l=Object.getOwnPropertyNames,p=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty,d=(e,t,r,s)=>{if(t&&"object"==typeof t||"function"==typeof t)for(let o of l(t))u.call(e,o)||o===r||a(e,o,{get:()=>t[o],enumerable:!(s=c(t,o))||s.enumerable});return e},g={};((e,t)=>{for(var r in t)a(e,r,{get:t[r],enumerable:!0})})(g,{createAppAuth:()=>U,createOAuthUserAuth:()=>R.createOAuthUserAuth}),e.exports=d(a({},"__esModule",{value:!0}),g);var h=r(79988),m=r(8058),T=r(32849),E=r(86544);i=null!=(s=r(32849))?n(p(s)):{},d(!o&&s&&s.__esModule?i:a(i,"default",{value:s,enumerable:!0}),s);var f=r(40568);async function _({appId:e,privateKey:t,timeDifference:r}){try{let s=await (0,f.githubAppJwt)({id:+e,privateKey:t,now:r&&Math.floor(Date.now()/1e3)+r});return{type:"app",token:s.token,appId:s.appId,expiresAt:new Date(1e3*s.expiration).toISOString()}}catch(e){if("-----BEGIN RSA PRIVATE KEY-----"===t)throw Error("The 'privateKey` option contains only the first line '-----BEGIN RSA PRIVATE KEY-----'. If you are setting it using a `.env` file, make sure it is set on a single line with newlines replaced by '\n'");throw e}}var b=r(81404);async function w(e,t){let r=k(t),s=await e.get(r);if(!s)return;let[o,i,n,a,c,l]=s.split("|");return{token:o,createdAt:i,expiresAt:n,permissions:t.permissions||c.split(/,/).reduce((e,t)=>(/!$/.test(t)?e[t.slice(0,-1)]="write":e[t]="read",e),{}),repositoryIds:t.repositoryIds,repositoryNames:t.repositoryNames,singleFileName:l,repositorySelection:a}}async function y(e,t,r){let s=k(t),o=t.permissions?"":Object.keys(r.permissions).map(e=>`${e}${"write"===r.permissions[e]?"!":""}`).join(","),i=[r.token,r.createdAt,r.expiresAt,r.repositorySelection,o,r.singleFileName].join("|");await e.set(s,i)}function k({installationId:e,permissions:t={},repositoryIds:r=[],repositoryNames:s=[]}){let o=Object.keys(t).sort().map(e=>"read"===t[e]?e:`${e}!`).join(",");return[e,r.sort().join(","),s.join(","),o].filter(Boolean).join("|")}function v({installationId:e,token:t,createdAt:r,expiresAt:s,repositorySelection:o,permissions:i,repositoryIds:n,repositoryNames:a,singleFileName:c}){return Object.assign({type:"token",tokenType:"installation",token:t,installationId:e,permissions:i,createdAt:r,expiresAt:s,repositorySelection:o},n?{repositoryIds:n}:null,a?{repositoryNames:a}:null,c?{singleFileName:c}:null)}async function S(e,t,r){let s=Number(t.installationId||e.installationId);if(!s)throw Error("[@octokit/auth-app] installationId option is required for installation authentication.");if(t.factory){let{type:r,factory:s,oauthApp:o,...i}={...e,...t};return s(i)}let o=Object.assign({installationId:s},t);if(!t.refresh){let t=await w(e.cache,o);if(t){let{token:e,createdAt:r,expiresAt:o,permissions:i,repositoryIds:n,repositoryNames:a,singleFileName:c,repositorySelection:l}=t;return v({installationId:s,token:e,createdAt:r,expiresAt:o,permissions:i,repositorySelection:l,repositoryIds:n,repositoryNames:a,singleFileName:c})}}let i=await _(e),n=r||e.request,{data:{token:a,expires_at:c,repositories:l,permissions:p,repository_selection:u,single_file:d}}=await n("POST /app/installations/{installation_id}/access_tokens",{installation_id:s,repository_ids:t.repositoryIds,repositories:t.repositoryNames,permissions:t.permissions,mediaType:{previews:["machine-man"]},headers:{authorization:`bearer ${i.token}`}}),g=p||{},h=u||"all",m=l?l.map(e=>e.id):void 0,T=l?l.map(e=>e.name):void 0,E=new Date().toISOString();return await y(e.cache,o,{token:a,createdAt:E,expiresAt:c,repositorySelection:h,permissions:g,repositoryIds:m,repositoryNames:T,singleFileName:d}),v({installationId:s,token:a,createdAt:E,expiresAt:c,repositorySelection:h,permissions:g,repositoryIds:m,repositoryNames:T,singleFileName:d})}async function A(e,t){switch(t.type){case"app":return _(e);case"oauth":e.log.warn(new E.Deprecation('[@octokit/auth-app] {type: "oauth"} is deprecated. Use {type: "oauth-app"} instead'));case"oauth-app":return e.oauthApp({type:"oauth-app"});case"installation":return S(e,{...t,type:"installation"});case"oauth-user":return e.oauthApp(t);default:throw Error(`Invalid auth type: ${t.type}`)}}var P=r(54522);r(22210);var G=function(e){let t=e.map(e=>e.split("/").map(e=>e.startsWith("{")?"(?:.+?)":e).join("/"));return RegExp(`^(?:${t.map(e=>`(?:${e})`).join("|")})$`,"i")}(["/app","/app/hook/config","/app/hook/deliveries","/app/hook/deliveries/{delivery_id}","/app/hook/deliveries/{delivery_id}/attempts","/app/installations","/app/installations/{installation_id}","/app/installations/{installation_id}/access_tokens","/app/installations/{installation_id}/suspended","/app/installation-requests","/marketplace_listing/accounts/{account_id}","/marketplace_listing/plan","/marketplace_listing/plans","/marketplace_listing/plans/{plan_id}/accounts","/marketplace_listing/stubbed/accounts/{account_id}","/marketplace_listing/stubbed/plan","/marketplace_listing/stubbed/plans","/marketplace_listing/stubbed/plans/{plan_id}/accounts","/orgs/{org}/installation","/repos/{owner}/{repo}/installation","/users/{username}/installation"]);async function O(e,t,r,s){var o;let i=t.endpoint.merge(r,s),n=i.url;if(/\/login\/oauth\/access_token$/.test(n))return t(i);if((o=n.replace(t.endpoint.DEFAULTS.baseUrl,""))&&G.test(o.split("?")[0])){let r;let{token:s}=await _(e);i.headers.authorization=`bearer ${s}`;try{r=await t(i)}catch(o){if(!(o.message.match(/'Expiration time' claim \('exp'\) must be a numeric value representing the future time at which the assertion expires/)||o.message.match(/'Issued at' claim \('iat'\) must be an Integer representing the time that the assertion was issued/))||void 0===o.response.headers.date)throw o;let r=Math.floor((Date.parse(o.response.headers.date)-Date.parse(new Date().toString()))/1e3);e.log.warn(o.message),e.log.warn(`[@octokit/auth-app] GitHub API time and system time are different by ${r} seconds. Retrying request with the difference accounted for.`);let{token:s}=await _({...e,timeDifference:r});return i.headers.authorization=`bearer ${s}`,t(i)}return r}if((0,P.requiresBasicAuth)(n)){let r=await e.oauthApp({type:"oauth-app"});return i.headers.authorization=r.headers.authorization,t(i)}let{token:a,createdAt:c}=await S(e,{},t.defaults({baseUrl:i.baseUrl}));return i.headers.authorization=`token ${a}`,F(e,t,i,c)}async function F(e,t,r,s,o=0){let i=+new Date-+new Date(s);try{return await t(r)}catch(a){if(401!==a.status)throw a;if(i>=5e3)throw o>0&&(a.message=`After ${o} retries within ${i/1e3}s of creating the installation access token, the response remains 401. At this point, the cause may be an authentication problem or a system outage. Please check https://www.githubstatus.com for status information`),a;let n=1e3*++o;return e.log.warn(`[@octokit/auth-app] Retrying after 401 response to account for token replication delay (retry: ${o}, wait: ${n/1e3}s)`),await new Promise(e=>setTimeout(e,n)),F(e,t,r,s,o)}}var R=r(54522);function U(e){if(!e.appId)throw Error("[@octokit/auth-app] appId option is required");if(!Number.isFinite(+e.appId))throw Error("[@octokit/auth-app] appId option must be a number or numeric string");if(!e.privateKey)throw Error("[@octokit/auth-app] privateKey option is required");if("installationId"in e&&!e.installationId)throw Error("[@octokit/auth-app] installationId is set to a falsy value");let t=e.log||{};"function"!=typeof t.warn&&(t.warn=console.warn.bind(console));let r=e.request||m.request.defaults({headers:{"user-agent":`octokit-auth-app.js/6.1.4 ${(0,h.getUserAgent)()}`}}),s=Object.assign({request:r,cache:new b.LRUCache({max:15e3,ttl:354e4})},e,e.installationId?{installationId:Number(e.installationId)}:{},{log:t,oauthApp:(0,T.createOAuthAppAuth)({clientType:"github-app",clientId:e.clientId||"",clientSecret:e.clientSecret||"",request:r})});return Object.assign(A.bind(null,s),{hook:O.bind(null,s)})}},32849:(e,t,r)=>{"use strict";r.r(t),r.d(t,{createOAuthAppAuth:()=>u,createOAuthUserAuth:()=>a.createOAuthUserAuth});var s=r(79988),o=r(8058),i=r(17274),n=r.n(i),a=r(54522);async function c(e,t){if("oauth-app"===t.type)return{type:"oauth-app",clientId:e.clientId,clientSecret:e.clientSecret,clientType:e.clientType,headers:{authorization:`basic ${n()(`${e.clientId}:${e.clientSecret}`)}`}};if("factory"in t){let{type:r,...s}={...t,...e};return t.factory(s)}let r={clientId:e.clientId,clientSecret:e.clientSecret,request:e.request,...t};return(e.clientType,await (0,a.createOAuthUserAuth)({...r,clientType:e.clientType}))()}var l=r(69374);async function p(e,t,r,s){let o=t.endpoint.merge(r,s);if(/\/login\/(oauth\/access_token|device\/code)$/.test(o.url))return t(o);if("github-app"===e.clientType&&!(0,l.X)(o.url))throw Error(`[@octokit/auth-oauth-app] GitHub Apps cannot use their client ID/secret for basic authentication for endpoints other than "/applications/{client_id}/**". "${o.method} ${o.url}" is not supported.`);let i=n()(`${e.clientId}:${e.clientSecret}`);o.headers.authorization=`basic ${i}`;try{return await t(o)}catch(e){if(401!==e.status)throw e;throw e.message=`[@octokit/auth-oauth-app] "${o.method} ${o.url}" does not support clientId/clientSecret basic authentication.`,e}}function u(e){let t=Object.assign({request:o.request.defaults({headers:{"user-agent":`octokit-auth-oauth-app.js/7.1.0 ${(0,s.getUserAgent)()}`}}),clientType:"oauth-app"},e);return Object.assign(c.bind(null,t),{hook:p.bind(null,t)})}},54522:(e,t,r)=>{"use strict";r.r(t),r.d(t,{createOAuthUserAuth:()=>F,requiresBasicAuth:()=>G.X});var s=r(79988),o=r(8058);let i="4.1.0";var n=r(22210);async function a(e,t,r){let s={baseUrl:function(e){let t=e.endpoint.DEFAULTS;return/^https:\/\/(api\.)?github\.com$/.test(t.baseUrl)?"https://github.com":t.baseUrl.replace("/api/v3","")}(e),headers:{accept:"application/json"},...r},o=await e(t,s);if("error"in o.data){let r=new n.RequestError(`${o.data.error_description} (${o.data.error}, ${o.data.error_uri})`,400,{request:e.endpoint.merge(t,s),headers:o.headers});throw r.response=o,r}return o}async function c(e){let t=e.request||o.request,r={client_id:e.clientId};return"scopes"in e&&Array.isArray(e.scopes)&&(r.scope=e.scopes.join(" ")),a(t,"POST /login/device/code",r)}async function l(e){let t=e.request||o.request,r=await a(t,"POST /login/oauth/access_token",{client_id:e.clientId,device_code:e.code,grant_type:"urn:ietf:params:oauth:grant-type:device_code"}),s={clientType:e.clientType,clientId:e.clientId,token:r.data.access_token,scopes:r.data.scope.split(/\s+/).filter(Boolean)};if("clientSecret"in e&&(s.clientSecret=e.clientSecret),"github-app"===e.clientType){if("refresh_token"in r.data){let e=new Date(r.headers.date).getTime();s.refreshToken=r.data.refresh_token,s.expiresAt=p(e,r.data.expires_in),s.refreshTokenExpiresAt=p(e,r.data.refresh_token_expires_in)}delete s.scopes}return{...r,authentication:s}}function p(e,t){return new Date(e+1e3*t).toISOString()}async function u(e,t){let r=function(e,t){if(!0===t.refresh||!e.authentication)return!1;if("github-app"===e.clientType)return e.authentication;let r=e.authentication;return("scopes"in t&&t.scopes||e.scopes).join(" ")===r.scopes.join(" ")&&r}(e,t.auth);if(r)return r;let{data:s}=await c({clientType:e.clientType,clientId:e.clientId,request:t.request||e.request,scopes:t.auth.scopes||e.scopes});await e.onVerification(s);let o=await g(t.request||e.request,e.clientId,e.clientType,s);return e.authentication=o,o}async function d(e){await new Promise(t=>setTimeout(t,1e3*e))}async function g(e,t,r,s){try{let o={clientId:t,request:e,code:s.device_code},{authentication:i}="oauth-app"===r?await l({...o,clientType:"oauth-app"}):await l({...o,clientType:"github-app"});return{type:"token",tokenType:"oauth",...i}}catch(i){if(!i.response)throw i;let o=i.response.data.error;if("authorization_pending"===o)return await d(s.interval),g(e,t,r,s);if("slow_down"===o)return await d(s.interval+5),g(e,t,r,s);throw i}}async function h(e,t){return u(e,{auth:t})}async function m(e,t,r,s){let o=t.endpoint.merge(r,s);if(/\/login\/(oauth\/access_token|device\/code)$/.test(o.url))return t(o);let{token:i}=await u(e,{request:t,auth:{type:"oauth"}});return o.headers.authorization=`token ${i}`,t(o)}async function T(e){let t=e.request||o.request,r=await a(t,"POST /login/oauth/access_token",{client_id:e.clientId,client_secret:e.clientSecret,code:e.code,redirect_uri:e.redirectUrl}),s={clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:r.data.access_token,scopes:r.data.scope.split(/\s+/).filter(Boolean)};if("github-app"===e.clientType){if("refresh_token"in r.data){let e=new Date(r.headers.date).getTime();s.refreshToken=r.data.refresh_token,s.expiresAt=E(e,r.data.expires_in),s.refreshTokenExpiresAt=E(e,r.data.refresh_token_expires_in)}delete s.scopes}return{...r,authentication:s}}function E(e,t){return new Date(e+1e3*t).toISOString()}async function f(e){if("code"in e.strategyOptions){let{authentication:t}=await T({clientId:e.clientId,clientSecret:e.clientSecret,clientType:e.clientType,onTokenCreated:e.onTokenCreated,...e.strategyOptions,request:e.request});return{type:"token",tokenType:"oauth",...t}}if("onVerification"in e.strategyOptions){let t=function(e){let t=e.request||o.request.defaults({headers:{"user-agent":`octokit-auth-oauth-device.js/6.1.0 ${(0,s.getUserAgent)()}`}}),{request:r=t,...i}=e,n="github-app"===e.clientType?{...i,clientType:"github-app",request:r}:{...i,clientType:"oauth-app",request:r,scopes:e.scopes||[]};if(!e.clientId)throw Error('[@octokit/auth-oauth-device] "clientId" option must be set (https://github.com/octokit/auth-oauth-device.js#usage)');if(!e.onVerification)throw Error('[@octokit/auth-oauth-device] "onVerification" option must be a function (https://github.com/octokit/auth-oauth-device.js#usage)');return Object.assign(h.bind(null,n),{hook:m.bind(null,n)})}({clientType:e.clientType,clientId:e.clientId,onTokenCreated:e.onTokenCreated,...e.strategyOptions,request:e.request}),r=await t({type:"oauth"});return{clientSecret:e.clientSecret,...r}}if("token"in e.strategyOptions)return{type:"token",tokenType:"oauth",clientId:e.clientId,clientSecret:e.clientSecret,clientType:e.clientType,onTokenCreated:e.onTokenCreated,...e.strategyOptions};throw Error("[@octokit/auth-oauth-user] Invalid strategy options")}async function _(e){let t=e.request||o.request,r=await a(t,"POST /login/oauth/access_token",{client_id:e.clientId,client_secret:e.clientSecret,grant_type:"refresh_token",refresh_token:e.refreshToken}),s=new Date(r.headers.date).getTime(),i={clientType:"github-app",clientId:e.clientId,clientSecret:e.clientSecret,token:r.data.access_token,refreshToken:r.data.refresh_token,expiresAt:b(s,r.data.expires_in),refreshTokenExpiresAt:b(s,r.data.refresh_token_expires_in)};return{...r,authentication:i}}function b(e,t){return new Date(e+1e3*t).toISOString()}var w=r(17274),y=r.n(w);async function k(e){let t=e.request||o.request,r=await t("POST /applications/{client_id}/token",{headers:{authorization:`basic ${y()(`${e.clientId}:${e.clientSecret}`)}`},client_id:e.clientId,access_token:e.token}),s={clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:e.token,scopes:r.data.scopes};return r.data.expires_at&&(s.expiresAt=r.data.expires_at),"github-app"===e.clientType&&delete s.scopes,{...r,authentication:s}}async function v(e){let t=e.request||o.request,r=y()(`${e.clientId}:${e.clientSecret}`),s=await t("PATCH /applications/{client_id}/token",{headers:{authorization:`basic ${r}`},client_id:e.clientId,access_token:e.token}),i={clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:s.data.token,scopes:s.data.scopes};return s.data.expires_at&&(i.expiresAt=s.data.expires_at),"github-app"===e.clientType&&delete i.scopes,{...s,authentication:i}}async function S(e){let t=e.request||o.request,r=y()(`${e.clientId}:${e.clientSecret}`);return t("DELETE /applications/{client_id}/token",{headers:{authorization:`basic ${r}`},client_id:e.clientId,access_token:e.token})}async function A(e){let t=e.request||o.request,r=y()(`${e.clientId}:${e.clientSecret}`);return t("DELETE /applications/{client_id}/grant",{headers:{authorization:`basic ${r}`},client_id:e.clientId,access_token:e.token})}async function P(e,t={}){if(e.authentication||(e.authentication=(e.clientType,await f(e))),e.authentication.invalid)throw Error("[@octokit/auth-oauth-user] Token is invalid");let r=e.authentication;if("expiresAt"in r&&("refresh"===t.type||new Date(r.expiresAt)<new Date)){let{authentication:t}=await _({clientType:"github-app",clientId:e.clientId,clientSecret:e.clientSecret,refreshToken:r.refreshToken,request:e.request});e.authentication={tokenType:"oauth",type:"token",...t}}if("refresh"===t.type){if("oauth-app"===e.clientType)throw Error("[@octokit/auth-oauth-user] OAuth Apps do not support expiring tokens");if(!r.hasOwnProperty("expiresAt"))throw Error("[@octokit/auth-oauth-user] Refresh token missing");await e.onTokenCreated?.(e.authentication,{type:t.type})}if("check"===t.type||"reset"===t.type){let r="check"===t.type?k:v;try{let{authentication:s}=await r({clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:e.authentication.token,request:e.request});return e.authentication={tokenType:"oauth",type:"token",...s},"reset"===t.type&&await e.onTokenCreated?.(e.authentication,{type:t.type}),e.authentication}catch(t){throw 404===t.status&&(t.message="[@octokit/auth-oauth-user] Token is invalid",e.authentication.invalid=!0),t}}if("delete"===t.type||"deleteAuthorization"===t.type){let r="delete"===t.type?S:A;try{await r({clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:e.authentication.token,request:e.request})}catch(e){if(404!==e.status)throw e}e.authentication.invalid=!0}return e.authentication}var G=r(69374);async function O(e,t,r,s={}){let o=t.endpoint.merge(r,s);if(/\/login\/(oauth\/access_token|device\/code)$/.test(o.url))return t(o);if((0,G.X)(o.url)){let r=y()(`${e.clientId}:${e.clientSecret}`);return o.headers.authorization=`basic ${r}`,t(o)}let{token:i}=(e.clientType,await P({...e,request:t}));return o.headers.authorization="token "+i,t(o)}function F({clientId:e,clientSecret:t,clientType:r="oauth-app",request:n=o.request.defaults({headers:{"user-agent":`octokit-auth-oauth-app.js/${i} ${(0,s.getUserAgent)()}`}}),onTokenCreated:a,...c}){let l=Object.assign({clientType:r,clientId:e,clientSecret:t,onTokenCreated:a,strategyOptions:c,request:n});return Object.assign(P.bind(null,l),{hook:O.bind(null,l)})}F.VERSION=i},69374:(e,t,r)=>{"use strict";r.d(t,{X:()=>o});let s=/\/applications\/[^/]+\/(token|grant)s?/;function o(e){return e&&s.test(e)}},22210:(e,t,r)=>{"use strict";r.r(t),r.d(t,{RequestError:()=>c});var s=r(86544),o=r(17337),i=r.n(o);let n=i()(e=>console.warn(e)),a=i()(e=>console.warn(e));class c extends Error{constructor(e,t,r){let o;super(e),Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor),this.name="HttpError",this.status=t,"headers"in r&&void 0!==r.headers&&(o=r.headers),"response"in r&&(this.response=r.response,o=r.response.headers);let i=Object.assign({},r.request);r.request.headers.authorization&&(i.headers=Object.assign({},r.request.headers,{authorization:r.request.headers.authorization.replace(/(?<! ) .*$/," [REDACTED]")})),i.url=i.url.replace(/\bclient_secret=\w+/g,"client_secret=[REDACTED]").replace(/\baccess_token=\w+/g,"access_token=[REDACTED]"),this.request=i,Object.defineProperty(this,"code",{get:()=>(n(new s.Deprecation("[@octokit/request-error] `error.code` is deprecated, use `error.status`.")),t)}),Object.defineProperty(this,"headers",{get:()=>(a(new s.Deprecation("[@octokit/request-error] `error.headers` is deprecated, use `error.response.headers`.")),o||{})})}}},8058:(e,t,r)=>{"use strict";function s(e){for(let t in e)void 0===e[t]&&delete e[t];return e}function o(e,t,r){var o;if("string"==typeof t){let[e,s]=t.split(" ");r=Object.assign(s?{method:e,url:s}:{url:e},r)}else r=Object.assign({},t);r.headers=(o=r.headers)?Object.keys(o).reduce((e,t)=>(e[t.toLowerCase()]=o[t],e),{}):{},s(r),s(r.headers);let i=function e(t,r){let s=Object.assign({},t);return Object.keys(r).forEach(o=>{(function(e){if("object"!=typeof e||null===e||"[object Object]"!==Object.prototype.toString.call(e))return!1;let t=Object.getPrototypeOf(e);if(null===t)return!0;let r=Object.prototype.hasOwnProperty.call(t,"constructor")&&t.constructor;return"function"==typeof r&&r instanceof r&&Function.prototype.call(r)===Function.prototype.call(e)})(r[o])&&o in t?s[o]=e(t[o],r[o]):Object.assign(s,{[o]:r[o]})}),s}(e||{},r);return"/graphql"===r.url&&(e&&e.mediaType.previews?.length&&(i.mediaType.previews=e.mediaType.previews.filter(e=>!i.mediaType.previews.includes(e)).concat(i.mediaType.previews)),i.mediaType.previews=(i.mediaType.previews||[]).map(e=>e.replace(/-preview/,""))),i}r.r(t),r.d(t,{request:()=>w});let i=/\{[^{}}]+\}/g;function n(e){return e.replace(/(?:^\W+)|(?:(?<!\W)\W+$)/g,"").split(/,/)}function a(e,t){let r={__proto__:null};for(let s of Object.keys(e))-1===t.indexOf(s)&&(r[s]=e[s]);return r}function c(e){return e.split(/(%[0-9A-Fa-f]{2})/g).map(function(e){return/%[0-9A-Fa-f]/.test(e)||(e=encodeURI(e).replace(/%5B/g,"[").replace(/%5D/g,"]")),e}).join("")}function l(e){return encodeURIComponent(e).replace(/[!'()*]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function p(e,t,r){return(t="+"===e||"#"===e?c(t):l(t),r)?l(r)+"="+t:t}function u(e){return null!=e}function d(e){return";"===e||"&"===e||"?"===e}function g(e,t){var r=["+","#",".","/",";","?","&"];return"/"===(e=e.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g,function(e,s,o){if(!s)return c(o);{let e="",o=[];if(-1!==r.indexOf(s.charAt(0))&&(e=s.charAt(0),s=s.substr(1)),s.split(/,/g).forEach(function(r){var s=/([^:\*]*)(?::(\d+)|(\*))?/.exec(r);o.push(function(e,t,r,s){var o=e[r],i=[];if(u(o)&&""!==o){if("string"==typeof o||"number"==typeof o||"boolean"==typeof o)o=o.toString(),s&&"*"!==s&&(o=o.substring(0,parseInt(s,10))),i.push(p(t,o,d(t)?r:""));else if("*"===s)Array.isArray(o)?o.filter(u).forEach(function(e){i.push(p(t,e,d(t)?r:""))}):Object.keys(o).forEach(function(e){u(o[e])&&i.push(p(t,o[e],e))});else{let e=[];Array.isArray(o)?o.filter(u).forEach(function(r){e.push(p(t,r))}):Object.keys(o).forEach(function(r){u(o[r])&&(e.push(l(r)),e.push(p(t,o[r].toString())))}),d(t)?i.push(l(r)+"="+e.join(",")):0!==e.length&&i.push(e.join(","))}}else";"===t?u(o)&&i.push(l(r)):""===o&&("&"===t||"?"===t)?i.push(l(r)+"="):""===o&&i.push("");return i}(t,e,s[1],s[2]||s[3]))}),!e||"+"===e)return o.join(",");var i=",";return"?"===e?i="&":"#"!==e&&(i=e),(0!==o.length?e:"")+o.join(i)}}))?e:e.replace(/\/$/,"")}function h(e){let t,r=e.method.toUpperCase(),s=(e.url||"/").replace(/:([a-z]\w+)/g,"{$1}"),o=Object.assign({},e.headers),c=a(e,["method","baseUrl","url","headers","request","mediaType"]),l=function(e){let t=e.match(i);return t?t.map(n).reduce((e,t)=>e.concat(t),[]):[]}(s);s=({expand:g.bind(null,s)}).expand(c),/^http/.test(s)||(s=e.baseUrl+s);let p=a(c,Object.keys(e).filter(e=>l.includes(e)).concat("baseUrl"));if(!/application\/octet-stream/i.test(o.accept)&&(e.mediaType.format&&(o.accept=o.accept.split(/,/).map(t=>t.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,`application/vnd$1$2.${e.mediaType.format}`)).join(",")),s.endsWith("/graphql")&&e.mediaType.previews?.length)){let t=o.accept.match(/(?<![\w-])[\w-]+(?=-preview)/g)||[];o.accept=t.concat(e.mediaType.previews).map(t=>{let r=e.mediaType.format?`.${e.mediaType.format}`:"+json";return`application/vnd.github.${t}-preview${r}`}).join(",")}return["GET","HEAD"].includes(r)?s=function(e,t){let r=/\?/.test(e)?"&":"?",s=Object.keys(t);return 0===s.length?e:e+r+s.map(e=>"q"===e?"q="+t.q.split("+").map(encodeURIComponent).join("+"):`${e}=${encodeURIComponent(t[e])}`).join("&")}(s,p):"data"in p?t=p.data:Object.keys(p).length&&(t=p),o["content-type"]||void 0===t||(o["content-type"]="application/json; charset=utf-8"),["PATCH","PUT"].includes(r)&&void 0===t&&(t=""),Object.assign({method:r,url:s,headers:o},void 0!==t?{body:t}:null,e.request?{request:e.request}:null)}function m(e,t,r){return h(o(e,t,r))}var T=r(79988);let E=function e(t,r){let s=o(t,r);return Object.assign(m.bind(null,s),{DEFAULTS:s,defaults:e.bind(null,s),merge:o.bind(null,s),parse:h})}(null,{method:"GET",baseUrl:"https://api.github.com",headers:{accept:"application/vnd.github.v3+json","user-agent":`octokit-endpoint.js/9.0.6 ${(0,T.getUserAgent)()}`},mediaType:{format:""}});var f=r(22210);function _(e){let t,r;let s=e.request&&e.request.log?e.request.log:console,o=e.request?.parseSuccessResponseBody!==!1;((function(e){if("object"!=typeof e||null===e||"[object Object]"!==Object.prototype.toString.call(e))return!1;let t=Object.getPrototypeOf(e);if(null===t)return!0;let r=Object.prototype.hasOwnProperty.call(t,"constructor")&&t.constructor;return"function"==typeof r&&r instanceof r&&Function.prototype.call(r)===Function.prototype.call(e)})(e.body)||Array.isArray(e.body))&&(e.body=JSON.stringify(e.body));let i={},{fetch:n}=globalThis;if(e.request?.fetch&&(n=e.request.fetch),!n)throw Error("fetch is not set. Please pass a fetch implementation as new Octokit({ request: { fetch }}). Learn more at https://github.com/octokit/octokit.js/#fetch-missing");return n(e.url,{method:e.method,body:e.body,redirect:e.request?.redirect,headers:e.headers,signal:e.request?.signal,...e.body&&{duplex:"half"}}).then(async n=>{for(let e of(r=n.url,t=n.status,n.headers))i[e[0]]=e[1];if("deprecation"in i){let t=i.link&&i.link.match(/<([^<>]+)>; rel="deprecation"/),r=t&&t.pop();s.warn(`[@octokit/request] "${e.method} ${e.url}" is deprecated. It is scheduled to be removed on ${i.sunset}${r?`. See ${r}`:""}`)}if(204!==t&&205!==t){if("HEAD"===e.method){if(t<400)return;throw new f.RequestError(n.statusText,t,{response:{url:r,status:t,headers:i,data:void 0},request:e})}if(304===t)throw new f.RequestError("Not modified",t,{response:{url:r,status:t,headers:i,data:await b(n)},request:e});if(t>=400){let s;let o=await b(n);throw new f.RequestError("string"==typeof o?o:(s="documentation_url"in o?` - ${o.documentation_url}`:"","message"in o)?Array.isArray(o.errors)?`${o.message}: ${o.errors.map(JSON.stringify).join(", ")}${s}`:`${o.message}${s}`:`Unknown error: ${JSON.stringify(o)}`,t,{response:{url:r,status:t,headers:i,data:o},request:e})}return o?await b(n):n.body}}).then(e=>({status:t,url:r,headers:i,data:e})).catch(t=>{if(t instanceof f.RequestError||"AbortError"===t.name)throw t;let r=t.message;throw"TypeError"===t.name&&"cause"in t&&(t.cause instanceof Error?r=t.cause.message:"string"==typeof t.cause&&(r=t.cause)),new f.RequestError(r,500,{request:e})})}async function b(e){let t=e.headers.get("content-type");return/application\/json/.test(t)?e.json().catch(()=>e.text()).catch(()=>""):!t||/^text\/|charset=utf-8$/.test(t)?e.text():e.arrayBuffer()}let w=function e(t,r){let s=t.defaults(r);return Object.assign(function(t,r){let o=s.merge(t,r);if(!o.request||!o.request.hook)return _(s.parse(o));let i=(e,t)=>_(s.parse(s.merge(e,t)));return Object.assign(i,{endpoint:s,defaults:e.bind(null,s)}),o.request.hook(i,o)},{endpoint:s,defaults:e.bind(null,s)})}(E,{headers:{"user-agent":`octokit-request.js/8.4.1 ${(0,T.getUserAgent)()}`}})},53164:(e,t,r)=>{var s=r(19157),o=r(50893),i=r(25189),n=Function.bind,a=n.bind(n);function c(e,t,r){var s=a(i,null).apply(null,r?[t,r]:[t]);e.api={remove:s},e.remove=s,["before","error","after","wrap"].forEach(function(s){var i=r?[t,s,r]:[t,s];e[s]=e.api[s]=a(o,null).apply(null,i)})}function l(){var e={registry:{}},t=s.bind(null,e);return c(t,e),t}var p=!1;function u(){return p||(console.warn('[before-after-hook]: "Hook()" repurposing warning, use "Hook.Collection()". Read more: https://git.io/upgrade-before-after-hook-to-1.4'),p=!0),l()}u.Singular=(function(){var e={registry:{}},t=s.bind(null,e,"h");return c(t,e,"h"),t}).bind(),u.Collection=l.bind(),e.exports=u,e.exports.Hook=u,e.exports.Singular=u.Singular,e.exports.Collection=u.Collection},50893:e=>{e.exports=function(e,t,r,s){var o=s;e.registry[r]||(e.registry[r]=[]),"before"===t&&(s=function(e,t){return Promise.resolve().then(o.bind(null,t)).then(e.bind(null,t))}),"after"===t&&(s=function(e,t){var r;return Promise.resolve().then(e.bind(null,t)).then(function(e){return o(r=e,t)}).then(function(){return r})}),"error"===t&&(s=function(e,t){return Promise.resolve().then(e.bind(null,t)).catch(function(e){return o(e,t)})}),e.registry[r].push({hook:s,orig:o})}},19157:e=>{e.exports=function e(t,r,s,o){if("function"!=typeof s)throw Error("method for before hook must be a function");return(o||(o={}),Array.isArray(r))?r.reverse().reduce(function(r,s){return e.bind(null,t,s,r,o)},s)():Promise.resolve().then(function(){return t.registry[r]?t.registry[r].reduce(function(e,t){return t.hook.bind(null,e,o)},s)():s(o)})}},25189:e=>{e.exports=function(e,t,r){if(e.registry[t]){var s=e.registry[t].map(function(e){return e.orig}).indexOf(r);-1!==s&&e.registry[t].splice(s,1)}}},17274:e=>{e.exports=function(e){return new Buffer(e).toString("base64")}},86544:(e,t,r)=>{"use strict";r.r(t),r.d(t,{Deprecation:()=>s});class s extends Error{constructor(e){super(e),Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor),this.name="Deprecation"}}},17337:(e,t,r)=>{var s=r(94643);function o(e){var t=function(){return t.called?t.value:(t.called=!0,t.value=e.apply(this,arguments))};return t.called=!1,t}function i(e){var t=function(){if(t.called)throw Error(t.onceError);return t.called=!0,t.value=e.apply(this,arguments)},r=e.name||"Function wrapped with `once`";return t.onceError=r+" shouldn't be called more than once",t.called=!1,t}e.exports=s(o),e.exports.strict=s(i),o.proto=o(function(){Object.defineProperty(Function.prototype,"once",{value:function(){return o(this)},configurable:!0}),Object.defineProperty(Function.prototype,"onceStrict",{value:function(){return i(this)},configurable:!0})})},40568:(e,t,r)=>{"use strict";function s(e){let t=new ArrayBuffer(e.length),r=new Uint8Array(t);for(let t=0,s=e.length;t<s;t++)r[t]=e.charCodeAt(t);return t}function o(e){return e.replace(/=/g,"").replace(/\+/g,"-").replace(/\//g,"_")}function i(e){return o(btoa(JSON.stringify(e)))}r.r(t),r.d(t,{githubAppJwt:()=>a});let n=async({privateKey:e,payload:t})=>{var r;if(/BEGIN RSA PRIVATE KEY/.test(e))throw Error("[universal-github-app-jwt] Private Key is in PKCS#1 format, but only PKCS#8 is supported. See https://github.com/gr2m/universal-github-app-jwt#readme");let n={name:"RSASSA-PKCS1-v1_5",hash:{name:"SHA-256"}},a=s(atob(e.trim().split("\n").slice(1,-1).join(""))),c=await crypto.subtle.importKey("pkcs8",a,n,!1,["sign"]),l=(r={alg:"RS256",typ:"JWT"},`${i(r)}.${i(t)}`),p=s(l),u=function(e){for(var t="",r=new Uint8Array(e),s=r.byteLength,i=0;i<s;i++)t+=String.fromCharCode(r[i]);return o(btoa(t))}(await crypto.subtle.sign(n.name,c,p));return`${l}.${u}`};async function a({id:e,privateKey:t,now:r=Math.floor(Date.now()/1e3)}){let s=r-30,o=s+600,i=await n({privateKey:t,payload:{iat:s,exp:o,iss:e}});return{appId:e,expiration:o,token:i}}},79988:(e,t,r)=>{"use strict";function s(){return"object"==typeof navigator&&"userAgent"in navigator?navigator.userAgent:"object"==typeof process&&void 0!==process.version?`Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`:"<environment undetectable>"}r.r(t),r.d(t,{getUserAgent:()=>s})},94643:e=>{e.exports=function e(t,r){if(t&&r)return e(t)(r);if("function"!=typeof t)throw TypeError("need wrapper function");return Object.keys(t).forEach(function(e){s[e]=t[e]}),s;function s(){for(var e=Array(arguments.length),r=0;r<e.length;r++)e[r]=arguments[r];var s=t.apply(this,e),o=e[e.length-1];return"function"==typeof s&&s!==o&&Object.keys(o).forEach(function(e){s[e]=o[e]}),s}}},81404:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LRUCache=void 0;let r="object"==typeof performance&&performance&&"function"==typeof performance.now?performance:Date,s=new Set,o="object"==typeof process&&process?process:{},i=(e,t,r,s)=>{"function"==typeof o.emitWarning?o.emitWarning(e,t,r,s):console.error(`[${r}] ${t}: ${e}`)},n=globalThis.AbortController,a=globalThis.AbortSignal;if(void 0===n){a=class{onabort;_onabort=[];reason;aborted=!1;addEventListener(e,t){this._onabort.push(t)}},n=class{constructor(){t()}signal=new a;abort(e){if(!this.signal.aborted){for(let t of(this.signal.reason=e,this.signal.aborted=!0,this.signal._onabort))t(e);this.signal.onabort?.(e)}}};let e=o.env?.LRU_CACHE_IGNORE_AC_WARNING!=="1",t=()=>{e&&(e=!1,i("AbortController is not defined. If using lru-cache in node 14, load an AbortController polyfill from the `node-abort-controller` package. A minimal polyfill is provided for use by LRUCache.fetch(), but it should not be relied upon in other contexts (eg, passing it to other APIs that use AbortController/AbortSignal might have undesirable effects). You may disable this with LRU_CACHE_IGNORE_AC_WARNING=1 in the env.","NO_ABORT_CONTROLLER","ENOTSUP",t))}}let c=e=>!s.has(e);Symbol("type");let l=e=>e&&e===Math.floor(e)&&e>0&&isFinite(e),p=e=>l(e)?e<=256?Uint8Array:e<=65536?Uint16Array:e<=4294967296?Uint32Array:e<=Number.MAX_SAFE_INTEGER?u:null:null;class u extends Array{constructor(e){super(e),this.fill(0)}}class d{heap;length;static #e=!1;static create(e){let t=p(e);if(!t)return[];d.#e=!0;let r=new d(e,t);return d.#e=!1,r}constructor(e,t){if(!d.#e)throw TypeError("instantiate Stack using Stack.create(n)");this.heap=new t(e),this.length=0}push(e){this.heap[this.length++]=e}pop(){return this.heap[--this.length]}}class g{#t;#r;#s;#o;#i;#n;ttl;ttlResolution;ttlAutopurge;updateAgeOnGet;updateAgeOnHas;allowStale;noDisposeOnSet;noUpdateTTL;maxEntrySize;sizeCalculation;noDeleteOnFetchRejection;noDeleteOnStaleGet;allowStaleOnFetchAbort;allowStaleOnFetchRejection;ignoreFetchAbort;#a;#c;#l;#p;#u;#d;#g;#h;#m;#T;#E;#f;#_;#b;#w;#y;#k;static unsafeExposeInternals(e){return{starts:e.#_,ttls:e.#b,sizes:e.#f,keyMap:e.#l,keyList:e.#p,valList:e.#u,next:e.#d,prev:e.#g,get head(){return e.#h},get tail(){return e.#m},free:e.#T,isBackgroundFetch:t=>e.#v(t),backgroundFetch:(t,r,s,o)=>e.#S(t,r,s,o),moveToTail:t=>e.#A(t),indexes:t=>e.#P(t),rindexes:t=>e.#G(t),isStale:t=>e.#O(t)}}get max(){return this.#t}get maxSize(){return this.#r}get calculatedSize(){return this.#c}get size(){return this.#a}get fetchMethod(){return this.#i}get memoMethod(){return this.#n}get dispose(){return this.#s}get disposeAfter(){return this.#o}constructor(e){let{max:t=0,ttl:r,ttlResolution:o=1,ttlAutopurge:n,updateAgeOnGet:a,updateAgeOnHas:u,allowStale:h,dispose:m,disposeAfter:T,noDisposeOnSet:E,noUpdateTTL:f,maxSize:_=0,maxEntrySize:b=0,sizeCalculation:w,fetchMethod:y,memoMethod:k,noDeleteOnFetchRejection:v,noDeleteOnStaleGet:S,allowStaleOnFetchRejection:A,allowStaleOnFetchAbort:P,ignoreFetchAbort:G}=e;if(0!==t&&!l(t))throw TypeError("max option must be a nonnegative integer");let O=t?p(t):Array;if(!O)throw Error("invalid max value: "+t);if(this.#t=t,this.#r=_,this.maxEntrySize=b||this.#r,this.sizeCalculation=w,this.sizeCalculation){if(!this.#r&&!this.maxEntrySize)throw TypeError("cannot set sizeCalculation without setting maxSize or maxEntrySize");if("function"!=typeof this.sizeCalculation)throw TypeError("sizeCalculation set to non-function")}if(void 0!==k&&"function"!=typeof k)throw TypeError("memoMethod must be a function if defined");if(this.#n=k,void 0!==y&&"function"!=typeof y)throw TypeError("fetchMethod must be a function if specified");if(this.#i=y,this.#y=!!y,this.#l=new Map,this.#p=Array(t).fill(void 0),this.#u=Array(t).fill(void 0),this.#d=new O(t),this.#g=new O(t),this.#h=0,this.#m=0,this.#T=d.create(t),this.#a=0,this.#c=0,"function"==typeof m&&(this.#s=m),"function"==typeof T?(this.#o=T,this.#E=[]):(this.#o=void 0,this.#E=void 0),this.#w=!!this.#s,this.#k=!!this.#o,this.noDisposeOnSet=!!E,this.noUpdateTTL=!!f,this.noDeleteOnFetchRejection=!!v,this.allowStaleOnFetchRejection=!!A,this.allowStaleOnFetchAbort=!!P,this.ignoreFetchAbort=!!G,0!==this.maxEntrySize){if(0!==this.#r&&!l(this.#r))throw TypeError("maxSize must be a positive integer if specified");if(!l(this.maxEntrySize))throw TypeError("maxEntrySize must be a positive integer if specified");this.#F()}if(this.allowStale=!!h,this.noDeleteOnStaleGet=!!S,this.updateAgeOnGet=!!a,this.updateAgeOnHas=!!u,this.ttlResolution=l(o)||0===o?o:1,this.ttlAutopurge=!!n,this.ttl=r||0,this.ttl){if(!l(this.ttl))throw TypeError("ttl must be a positive integer if specified");this.#R()}if(0===this.#t&&0===this.ttl&&0===this.#r)throw TypeError("At least one of max, maxSize, or ttl is required");if(!this.ttlAutopurge&&!this.#t&&!this.#r){let e="LRU_CACHE_UNBOUNDED";c(e)&&(s.add(e),i("TTL caching without ttlAutopurge, max, or maxSize can result in unbounded memory consumption.","UnboundedCacheWarning",e,g))}}getRemainingTTL(e){return this.#l.has(e)?1/0:0}#R(){let e=new u(this.#t),t=new u(this.#t);this.#b=e,this.#_=t,this.#U=(s,o,i=r.now())=>{if(t[s]=0!==o?i:0,e[s]=o,0!==o&&this.ttlAutopurge){let e=setTimeout(()=>{this.#O(s)&&this.#C(this.#p[s],"expire")},o+1);e.unref&&e.unref()}},this.#D=s=>{t[s]=0!==e[s]?r.now():0},this.#L=(r,i)=>{if(e[i]){let n=e[i],a=t[i];if(!n||!a)return;r.ttl=n,r.start=a,r.now=s||o();let c=r.now-a;r.remainingTTL=n-c}};let s=0,o=()=>{let e=r.now();if(this.ttlResolution>0){s=e;let t=setTimeout(()=>s=0,this.ttlResolution);t.unref&&t.unref()}return e};this.getRemainingTTL=r=>{let i=this.#l.get(r);if(void 0===i)return 0;let n=e[i],a=t[i];return n&&a?n-((s||o())-a):1/0},this.#O=r=>{let i=t[r],n=e[r];return!!n&&!!i&&(s||o())-i>n}}#D=()=>{};#L=()=>{};#U=()=>{};#O=()=>!1;#F(){let e=new u(this.#t);this.#c=0,this.#f=e,this.#I=t=>{this.#c-=e[t],e[t]=0},this.#j=(e,t,r,s)=>{if(this.#v(t))return 0;if(!l(r)){if(s){if("function"!=typeof s)throw TypeError("sizeCalculation must be a function");if(!l(r=s(t,e)))throw TypeError("sizeCalculation return invalid (expect positive integer)")}else throw TypeError("invalid size value (must be positive integer). When maxSize or maxEntrySize is used, sizeCalculation or size must be set.")}return r},this.#q=(t,r,s)=>{if(e[t]=r,this.#r){let r=this.#r-e[t];for(;this.#c>r;)this.#x(!0)}this.#c+=e[t],s&&(s.entrySize=r,s.totalCalculatedSize=this.#c)}}#I=e=>{};#q=(e,t,r)=>{};#j=(e,t,r,s)=>{if(r||s)throw TypeError("cannot set size without setting maxSize or maxEntrySize on cache");return 0};*#P({allowStale:e=this.allowStale}={}){if(this.#a)for(let t=this.#m;this.#z(t)&&((e||!this.#O(t))&&(yield t),t!==this.#h);)t=this.#g[t]}*#G({allowStale:e=this.allowStale}={}){if(this.#a)for(let t=this.#h;this.#z(t)&&((e||!this.#O(t))&&(yield t),t!==this.#m);)t=this.#d[t]}#z(e){return void 0!==e&&this.#l.get(this.#p[e])===e}*entries(){for(let e of this.#P())void 0===this.#u[e]||void 0===this.#p[e]||this.#v(this.#u[e])||(yield[this.#p[e],this.#u[e]])}*rentries(){for(let e of this.#G())void 0===this.#u[e]||void 0===this.#p[e]||this.#v(this.#u[e])||(yield[this.#p[e],this.#u[e]])}*keys(){for(let e of this.#P()){let t=this.#p[e];void 0===t||this.#v(this.#u[e])||(yield t)}}*rkeys(){for(let e of this.#G()){let t=this.#p[e];void 0===t||this.#v(this.#u[e])||(yield t)}}*values(){for(let e of this.#P())void 0===this.#u[e]||this.#v(this.#u[e])||(yield this.#u[e])}*rvalues(){for(let e of this.#G())void 0===this.#u[e]||this.#v(this.#u[e])||(yield this.#u[e])}[Symbol.iterator](){return this.entries()}[Symbol.toStringTag]="LRUCache";find(e,t={}){for(let r of this.#P()){let s=this.#u[r],o=this.#v(s)?s.__staleWhileFetching:s;if(void 0!==o&&e(o,this.#p[r],this))return this.get(this.#p[r],t)}}forEach(e,t=this){for(let r of this.#P()){let s=this.#u[r],o=this.#v(s)?s.__staleWhileFetching:s;void 0!==o&&e.call(t,o,this.#p[r],this)}}rforEach(e,t=this){for(let r of this.#G()){let s=this.#u[r],o=this.#v(s)?s.__staleWhileFetching:s;void 0!==o&&e.call(t,o,this.#p[r],this)}}purgeStale(){let e=!1;for(let t of this.#G({allowStale:!0}))this.#O(t)&&(this.#C(this.#p[t],"expire"),e=!0);return e}info(e){let t=this.#l.get(e);if(void 0===t)return;let s=this.#u[t],o=this.#v(s)?s.__staleWhileFetching:s;if(void 0===o)return;let i={value:o};if(this.#b&&this.#_){let e=this.#b[t],s=this.#_[t];if(e&&s){let t=e-(r.now()-s);i.ttl=t,i.start=Date.now()}}return this.#f&&(i.size=this.#f[t]),i}dump(){let e=[];for(let t of this.#P({allowStale:!0})){let s=this.#p[t],o=this.#u[t],i=this.#v(o)?o.__staleWhileFetching:o;if(void 0===i||void 0===s)continue;let n={value:i};if(this.#b&&this.#_){n.ttl=this.#b[t];let e=r.now()-this.#_[t];n.start=Math.floor(Date.now()-e)}this.#f&&(n.size=this.#f[t]),e.unshift([s,n])}return e}load(e){for(let[t,s]of(this.clear(),e)){if(s.start){let e=Date.now()-s.start;s.start=r.now()-e}this.set(t,s.value,s)}}set(e,t,r={}){if(void 0===t)return this.delete(e),this;let{ttl:s=this.ttl,start:o,noDisposeOnSet:i=this.noDisposeOnSet,sizeCalculation:n=this.sizeCalculation,status:a}=r,{noUpdateTTL:c=this.noUpdateTTL}=r,l=this.#j(e,t,r.size||0,n);if(this.maxEntrySize&&l>this.maxEntrySize)return a&&(a.set="miss",a.maxEntrySizeExceeded=!0),this.#C(e,"set"),this;let p=0===this.#a?void 0:this.#l.get(e);if(void 0===p)p=0===this.#a?this.#m:0!==this.#T.length?this.#T.pop():this.#a===this.#t?this.#x(!1):this.#a,this.#p[p]=e,this.#u[p]=t,this.#l.set(e,p),this.#d[this.#m]=p,this.#g[p]=this.#m,this.#m=p,this.#a++,this.#q(p,l,a),a&&(a.set="add"),c=!1;else{this.#A(p);let r=this.#u[p];if(t!==r){if(this.#y&&this.#v(r)){r.__abortController.abort(Error("replaced"));let{__staleWhileFetching:t}=r;void 0!==t&&!i&&(this.#w&&this.#s?.(t,e,"set"),this.#k&&this.#E?.push([t,e,"set"]))}else!i&&(this.#w&&this.#s?.(r,e,"set"),this.#k&&this.#E?.push([r,e,"set"]));if(this.#I(p),this.#q(p,l,a),this.#u[p]=t,a){a.set="replace";let e=r&&this.#v(r)?r.__staleWhileFetching:r;void 0!==e&&(a.oldValue=e)}}else a&&(a.set="update")}if(0===s||this.#b||this.#R(),this.#b&&(c||this.#U(p,s,o),a&&this.#L(a,p)),!i&&this.#k&&this.#E){let e;let t=this.#E;for(;e=t?.shift();)this.#o?.(...e)}return this}pop(){try{for(;this.#a;){let e=this.#u[this.#h];if(this.#x(!0),this.#v(e)){if(e.__staleWhileFetching)return e.__staleWhileFetching}else if(void 0!==e)return e}}finally{if(this.#k&&this.#E){let e;let t=this.#E;for(;e=t?.shift();)this.#o?.(...e)}}}#x(e){let t=this.#h,r=this.#p[t],s=this.#u[t];return this.#y&&this.#v(s)?s.__abortController.abort(Error("evicted")):(this.#w||this.#k)&&(this.#w&&this.#s?.(s,r,"evict"),this.#k&&this.#E?.push([s,r,"evict"])),this.#I(t),e&&(this.#p[t]=void 0,this.#u[t]=void 0,this.#T.push(t)),1===this.#a?(this.#h=this.#m=0,this.#T.length=0):this.#h=this.#d[t],this.#l.delete(r),this.#a--,t}has(e,t={}){let{updateAgeOnHas:r=this.updateAgeOnHas,status:s}=t,o=this.#l.get(e);if(void 0!==o){let e=this.#u[o];if(this.#v(e)&&void 0===e.__staleWhileFetching)return!1;if(!this.#O(o))return r&&this.#D(o),s&&(s.has="hit",this.#L(s,o)),!0;s&&(s.has="stale",this.#L(s,o))}else s&&(s.has="miss");return!1}peek(e,t={}){let{allowStale:r=this.allowStale}=t,s=this.#l.get(e);if(void 0===s||!r&&this.#O(s))return;let o=this.#u[s];return this.#v(o)?o.__staleWhileFetching:o}#S(e,t,r,s){let o=void 0===t?void 0:this.#u[t];if(this.#v(o))return o;let i=new n,{signal:a}=r;a?.addEventListener("abort",()=>i.abort(a.reason),{signal:i.signal});let c={signal:i.signal,options:r,context:s},l=(s,o=!1)=>{let{aborted:n}=i.signal,a=r.ignoreFetchAbort&&void 0!==s;return(r.status&&(n&&!o?(r.status.fetchAborted=!0,r.status.fetchError=i.signal.reason,a&&(r.status.fetchAbortIgnored=!0)):r.status.fetchResolved=!0),!n||a||o)?(this.#u[t]===u&&(void 0===s?u.__staleWhileFetching?this.#u[t]=u.__staleWhileFetching:this.#C(e,"fetch"):(r.status&&(r.status.fetchUpdated=!0),this.set(e,s,c.options))),s):p(i.signal.reason)},p=s=>{let{aborted:o}=i.signal,n=o&&r.allowStaleOnFetchAbort,a=n||r.allowStaleOnFetchRejection,c=a||r.noDeleteOnFetchRejection;if(this.#u[t]!==u||(c&&void 0!==u.__staleWhileFetching?n||(this.#u[t]=u.__staleWhileFetching):this.#C(e,"fetch")),a)return r.status&&void 0!==u.__staleWhileFetching&&(r.status.returnedStale=!0),u.__staleWhileFetching;if(u.__returned===u)throw s};r.status&&(r.status.fetchDispatched=!0);let u=new Promise((t,s)=>{let n=this.#i?.(e,o,c);n&&n instanceof Promise&&n.then(e=>t(void 0===e?void 0:e),s),i.signal.addEventListener("abort",()=>{(!r.ignoreFetchAbort||r.allowStaleOnFetchAbort)&&(t(void 0),r.allowStaleOnFetchAbort&&(t=e=>l(e,!0)))})}).then(l,e=>(r.status&&(r.status.fetchRejected=!0,r.status.fetchError=e),p(e))),d=Object.assign(u,{__abortController:i,__staleWhileFetching:o,__returned:void 0});return void 0===t?(this.set(e,d,{...c.options,status:void 0}),t=this.#l.get(e)):this.#u[t]=d,d}#v(e){return!!this.#y&&!!e&&e instanceof Promise&&e.hasOwnProperty("__staleWhileFetching")&&e.__abortController instanceof n}async fetch(e,t={}){let{allowStale:r=this.allowStale,updateAgeOnGet:s=this.updateAgeOnGet,noDeleteOnStaleGet:o=this.noDeleteOnStaleGet,ttl:i=this.ttl,noDisposeOnSet:n=this.noDisposeOnSet,size:a=0,sizeCalculation:c=this.sizeCalculation,noUpdateTTL:l=this.noUpdateTTL,noDeleteOnFetchRejection:p=this.noDeleteOnFetchRejection,allowStaleOnFetchRejection:u=this.allowStaleOnFetchRejection,ignoreFetchAbort:d=this.ignoreFetchAbort,allowStaleOnFetchAbort:g=this.allowStaleOnFetchAbort,context:h,forceRefresh:m=!1,status:T,signal:E}=t;if(!this.#y)return T&&(T.fetch="get"),this.get(e,{allowStale:r,updateAgeOnGet:s,noDeleteOnStaleGet:o,status:T});let f={allowStale:r,updateAgeOnGet:s,noDeleteOnStaleGet:o,ttl:i,noDisposeOnSet:n,size:a,sizeCalculation:c,noUpdateTTL:l,noDeleteOnFetchRejection:p,allowStaleOnFetchRejection:u,allowStaleOnFetchAbort:g,ignoreFetchAbort:d,status:T,signal:E},_=this.#l.get(e);if(void 0===_){T&&(T.fetch="miss");let t=this.#S(e,_,f,h);return t.__returned=t}{let t=this.#u[_];if(this.#v(t)){let e=r&&void 0!==t.__staleWhileFetching;return T&&(T.fetch="inflight",e&&(T.returnedStale=!0)),e?t.__staleWhileFetching:t.__returned=t}let o=this.#O(_);if(!m&&!o)return T&&(T.fetch="hit"),this.#A(_),s&&this.#D(_),T&&this.#L(T,_),t;let i=this.#S(e,_,f,h),n=void 0!==i.__staleWhileFetching&&r;return T&&(T.fetch=o?"stale":"refresh",n&&o&&(T.returnedStale=!0)),n?i.__staleWhileFetching:i.__returned=i}}async forceFetch(e,t={}){let r=await this.fetch(e,t);if(void 0===r)throw Error("fetch() returned undefined");return r}memo(e,t={}){let r=this.#n;if(!r)throw Error("no memoMethod provided to constructor");let{context:s,forceRefresh:o,...i}=t,n=this.get(e,i);if(!o&&void 0!==n)return n;let a=r(e,n,{options:i,context:s});return this.set(e,a,i),a}get(e,t={}){let{allowStale:r=this.allowStale,updateAgeOnGet:s=this.updateAgeOnGet,noDeleteOnStaleGet:o=this.noDeleteOnStaleGet,status:i}=t,n=this.#l.get(e);if(void 0!==n){let t=this.#u[n],a=this.#v(t);return(i&&this.#L(i,n),this.#O(n))?(i&&(i.get="stale"),a)?(i&&r&&void 0!==t.__staleWhileFetching&&(i.returnedStale=!0),r?t.__staleWhileFetching:void 0):(o||this.#C(e,"expire"),i&&r&&(i.returnedStale=!0),r?t:void 0):(i&&(i.get="hit"),a)?t.__staleWhileFetching:(this.#A(n),s&&this.#D(n),t)}i&&(i.get="miss")}#$(e,t){this.#g[t]=e,this.#d[e]=t}#A(e){e!==this.#m&&(e===this.#h?this.#h=this.#d[e]:this.#$(this.#g[e],this.#d[e]),this.#$(this.#m,e),this.#m=e)}delete(e){return this.#C(e,"delete")}#C(e,t){let r=!1;if(0!==this.#a){let s=this.#l.get(e);if(void 0!==s){if(r=!0,1===this.#a)this.#B(t);else{this.#I(s);let r=this.#u[s];if(this.#v(r)?r.__abortController.abort(Error("deleted")):(this.#w||this.#k)&&(this.#w&&this.#s?.(r,e,t),this.#k&&this.#E?.push([r,e,t])),this.#l.delete(e),this.#p[s]=void 0,this.#u[s]=void 0,s===this.#m)this.#m=this.#g[s];else if(s===this.#h)this.#h=this.#d[s];else{let e=this.#g[s];this.#d[e]=this.#d[s];let t=this.#d[s];this.#g[t]=this.#g[s]}this.#a--,this.#T.push(s)}}}if(this.#k&&this.#E?.length){let e;let t=this.#E;for(;e=t?.shift();)this.#o?.(...e)}return r}clear(){return this.#B("delete")}#B(e){for(let t of this.#G({allowStale:!0})){let r=this.#u[t];if(this.#v(r))r.__abortController.abort(Error("deleted"));else{let s=this.#p[t];this.#w&&this.#s?.(r,s,e),this.#k&&this.#E?.push([r,s,e])}}if(this.#l.clear(),this.#u.fill(void 0),this.#p.fill(void 0),this.#b&&this.#_&&(this.#b.fill(0),this.#_.fill(0)),this.#f&&this.#f.fill(0),this.#h=0,this.#m=0,this.#T.length=0,this.#c=0,this.#a=0,this.#k&&this.#E){let e;let t=this.#E;for(;e=t?.shift();)this.#o?.(...e)}}}t.LRUCache=g}};var t=require("../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),s=t.X(0,[276,972],()=>r(1742));module.exports=s})();